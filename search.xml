<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>写法总结</title>
      <link href="2021/02/20/java/base/%E5%86%99%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>2021/02/20/java/base/%E5%86%99%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><p><a href="https://blog.csdn.net/juky_huang/article/details/5881682">Switch Case语句中多个值匹配一个代码块的写法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;ok!**********&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;wrong!*******&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;default case!*********&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java-基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>远程调试</title>
      <link href="2021/02/20/java/debug/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
      <url>2021/02/20/java/debug/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://km.sankuai.com/page/432424885">ST远程debug拒绝连接解决方案</a></p><p><a href="https://km.sankuai.com/page/213152503">如何远程debug服务的代码</a></p>]]></content>
      
      
      <categories>
          
          <category> java-debug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>问题汇总</title>
      <link href="2021/02/20/sql/mysql/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/02/20/sql/mysql/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="1-时间类型字段问题"><a href="#1-时间类型字段问题" class="headerlink" title="1. 时间类型字段问题"></a>1. 时间类型字段问题</h3><h4 id="1-1-时区问题"><a href="#1-1-时区问题" class="headerlink" title="1.1 时区问题"></a>1.1 时区问题</h4><p>现象一：写入时间在mysql中查看，与实际时间相差几个小时，程序读出来又是正常的</p><p><a href="https://www.cnblogs.com/PrayzzZ/p/10183470.html">关于MySQL存入的时间和取出时间不一致的解决</a></p><p><a href="https://blog.csdn.net/iris_xuting/article/details/84886483">MySQL数据时区问题，及datetime和timestamp类型存储的差异</a></p><p><a href="http://blog.sina.com.cn/s/blog_a72ec20c0101jgxd.html">Time Zone:GMT，UTC，DST，CST</a></p><p><a href="https://www.cnblogs.com/gaogao67/p/10686515.html">MySQL Config–参数system_time_zone和参数time_zone</a></p><p>查询系统分区：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span><span class="string">&#x27;%time_zone%&#x27;</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;10.48.204.231:5002&#x2F;waimai_hubble_analysis_test?useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;GMT%2B8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql-mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="2021/02/20/arithmetic/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2021/02/20/arithmetic/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h4 id="解题思路模板："><a href="#解题思路模板：" class="headerlink" title="解题思路模板："></a>解题思路模板：</h4><p>这是经典的动态编程问题。这是一个可以使用的模板：</p><ul><li>定义答案显而易见的基本情况。</li><li>制定根据简单的情况计算复杂情况的策略。</li><li>将此策略链接到基本情况。</li></ul><h4 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h4><p><a href="https://leetcode-cn.com/problems/coin-change-2/">leetcode-518.零钱兑换2</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tair使用规范</title>
      <link href="2021/02/10/tair/%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
      <url>2021/02/10/tair/%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/6417083301c2">缓存Tair高性能使用规范</a></p>]]></content>
      
      
      <categories>
          
          <category> tair </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis基本使用</title>
      <link href="2021/02/10/redis/redis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/02/10/redis/redis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lizhenghn/p/5322887.html">Redis常用数据类型介绍、使用场景及其操作命令</a></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一致性哈希</title>
      <link href="2021/02/10/arithmetic/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/"/>
      <url>2021/02/10/arithmetic/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/89605547">一致性哈希算法–&gt; 解决memecache 服务器扩容后的数据丢失</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java泛型</title>
      <link href="2021/02/10/java/base/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/"/>
      <url>2021/02/10/java/base/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="打印自定义对象数组内容"><a href="#打印自定义对象数组内容" class="headerlink" title="打印自定义对象数组内容"></a>打印自定义对象数组内容</h4><p><a href="https://blog.csdn.net/u012491783/article/details/78957168">java中list和array打印对象的方法</a></p><ol><li>重写自定义类toString方法</li><li>用google开源的lombok，加注释@Data，他自动帮你重写了toString方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.toString(array);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java-基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git设置</title>
      <link href="2021/02/10/tools/git/git%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/02/10/tools/git/git%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h3 id="简化命令"><a href="#简化命令" class="headerlink" title="简化命令"></a>简化命令</h3><p>git 添加别名的方式,打开~/.gitconfig文件在其末尾添加：<br>在命令行输入以下命令：<br>1、进到根目录<br>cd ~/<br>2、打开.gitconfig,<br>vi ~/.gitconfig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; add</span><br><span class="line">b &#x3D; branch</span><br><span class="line">c &#x3D; commit</span><br><span class="line">d &#x3D; diff</span><br><span class="line">l &#x3D; log --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset | %C(bold)%an&#39; --abbrev-commit --date&#x3D;relative</span><br><span class="line">r &#x3D; reset</span><br><span class="line">aa &#x3D; add .</span><br><span class="line">ba &#x3D; branch -a</span><br><span class="line">ca &#x3D; commit -a</span><br><span class="line">cc &#x3D; commit -a -m</span><br><span class="line">cl &#x3D; clone</span><br><span class="line">cm &#x3D; commit -m</span><br><span class="line">co &#x3D; checkout</span><br><span class="line">cp &#x3D; cherry-pick</span><br><span class="line">nb &#x3D; checkout -b</span><br><span class="line">pl &#x3D; pull</span><br><span class="line">ps &#x3D; push origin master</span><br><span class="line">st &#x3D; status</span><br></pre></td></tr></table></figure><p>git st 和 git status 等同效果<br>3、修改完后保存退出就可以了</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/02/10/sql/mysql/%E9%94%81%E5%8E%9F%E7%90%86/"/>
      <url>2021/02/10/sql/mysql/%E9%94%81%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql查询原理</title>
      <link href="2021/02/10/sql/mysql/%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86/"/>
      <url>2021/02/10/sql/mysql/%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id><a href="#" class="headerlink" title></a></h5><p><a href="https://www.cnblogs.com/minikobe/p/12359828.html">子查询与关联查询区别</a></p>]]></content>
      
      
      <categories>
          
          <category> sql-mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="2021/02/10/arithmetic/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>2021/02/10/arithmetic/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/minikobe/p/12105991.html">红黑树详解，红黑树与AVL树区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven问题解决</title>
      <link href="2021/02/10/tools/maven/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>2021/02/10/tools/maven/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="包冲突"><a href="#包冲突" class="headerlink" title="包冲突"></a>包冲突</h3><p><a href="https://km.sankuai.com/page/28132001">02_XMDLOG_绑定包冲突排查方法</a></p><p><a href="https://blog.csdn.net/weixin_33037051/article/details/111892927">maven依赖的jar包版本不一样_Maven依赖jar包冲突常见的解决方法</a></p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven学习</title>
      <link href="2021/02/10/tools/maven/maven%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/02/10/tools/maven/maven%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/EasonJim/p/6845012.html">Maven中plugins和pluginManagement的区别</a></p><p><a href="https://www.cnblogs.com/shawWey/p/7417335.html">maven依赖顺序原则</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程参考资料</title>
      <link href="2021/02/10/java/mult_thread/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>2021/02/10/java/mult_thread/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p><a href="https://blog.csdn.net/qq_33129875/article/details/93207370">volatile可见性的验证,system.out.println和sleep对可见性的影响</a></p><p><a href="https://blog.csdn.net/qq_31442743/article/details/107509580">volatile 、System.out.println() sleep()使用的有趣现象</a></p>]]></content>
      
      
      <categories>
          
          <category> java-多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java泛型</title>
      <link href="2021/02/10/java/base/%E6%B3%9B%E5%9E%8B/"/>
      <url>2021/02/10/java/base/%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/coprince/p/8603492.html">java 泛型详解-绝对是对泛型方法讲解最详细的，没有之一</a></p><p><a href="https://www.cnblogs.com/xy-ouyang/p/10539999.html">泛型（一）泛型类和泛型方法</a></p><p><a href="https://www.cnblogs.com/lihaoyang/p/7105581.html">JAVA泛型—通配符,泛型嵌套</a></p><p><a href="https://www.cnblogs.com/licqs/p/4608871.html">Java获取泛型的类型Class</a></p><p><a href="https://www.cnblogs.com/minikobe/p/11547220.html">java泛型通配符详解</a></p><p><a href="https://blog.csdn.net/weixin_29595517/article/details/113693350">关于通配泛型类型有几种_泛型类型的子类及通配符的使用</a></p>]]></content>
      
      
      <categories>
          
          <category> java-基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据源</title>
      <link href="2021/02/10/java/mybatis/mysql%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>2021/02/10/java/mybatis/mysql%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/a05bf0e757ac">关于MySql链接url参数的设置</a></p>]]></content>
      
      
      <categories>
          
          <category> java-mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>idea工程问题</title>
      <link href="2021/02/01/tools/idea/%E5%B7%A5%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
      <url>2021/02/01/tools/idea/%E5%B7%A5%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="如何引入其他module"><a href="#如何引入其他module" class="headerlink" title="如何引入其他module"></a>如何引入其他module</h3><p>[SpringMVC 项目中引用其他 Module 中的方法</p><p><a href="https://blog.csdn.net/menggudaoke/article/details/90601008">Idea中同一工程不同module之间相互调用</a></p><p>project structure 中添加依赖</p><h5 id="与依赖module一起打包命令"><a href="#与依赖module一起打包命令" class="headerlink" title="与依赖module一起打包命令"></a>与依赖module一起打包命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git基本命令</title>
      <link href="2021/01/30/tools/git/git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>2021/01/30/tools/git/git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><a href="https://chinese.freecodecamp.org/news/how-to-delete-a-git-branch-both-locally-and-remotely/">Git 操作——如何删除本地分支和远程分支</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>短语收集</title>
      <link href="2021/01/29/translate/%E7%9F%AD%E8%AF%AD/"/>
      <url>2021/01/29/translate/%E7%9F%AD%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<ol><li>In a nutshell 简而言之</li></ol>]]></content>
      
      
      <categories>
          
          <category> translate </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flink window</title>
      <link href="2021/01/29/flink/flink%20window/"/>
      <url>2021/01/29/flink/flink%20window/</url>
      
        <content type="html"><![CDATA[<h1 id="flink1-6"><a href="#flink1-6" class="headerlink" title="flink1.6"></a>flink1.6</h1><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/stream/operators/windows.html">官网链接</a></p><p><strong>Keyed Windows</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stream</span><br><span class="line">       .keyBy(...)               &lt;-  keyed versus non-keyed windows</span><br><span class="line">       .window(...)              &lt;-  required: &quot;assigner&quot;</span><br><span class="line">      [.trigger(...)]            &lt;-  optional: &quot;trigger&quot; (else default trigger)</span><br><span class="line">      [.evictor(...)]            &lt;-  optional: &quot;evictor&quot; (else no evictor)</span><br><span class="line">      [.allowedLateness(...)]    &lt;-  optional: &quot;lateness&quot; (else zero)</span><br><span class="line">      [.sideOutputLateData(...)] &lt;-  optional: &quot;output tag&quot; (else no side output for late data)</span><br><span class="line">       .reduce&#x2F;aggregate&#x2F;fold&#x2F;apply()      &lt;-  required: &quot;function&quot;</span><br><span class="line">      [.getSideOutput(...)]      &lt;-  optional: &quot;output tag&quot;</span><br></pre></td></tr></table></figure><p><strong>Non-Keyed Windows</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stream</span><br><span class="line">       .windowAll(...)           &lt;-  required: &quot;assigner&quot;</span><br><span class="line">      [.trigger(...)]            &lt;-  optional: &quot;trigger&quot; (else default trigger)</span><br><span class="line">      [.evictor(...)]            &lt;-  optional: &quot;evictor&quot; (else no evictor)</span><br><span class="line">      [.allowedLateness(...)]    &lt;-  optional: &quot;lateness&quot; (else zero)</span><br><span class="line">      [.sideOutputLateData(...)] &lt;-  optional: &quot;output tag&quot; (else no side output for late data)</span><br><span class="line">       .reduce&#x2F;aggregate&#x2F;fold&#x2F;apply()      &lt;-  required: &quot;function&quot;</span><br><span class="line">      [.getSideOutput(...)]      &lt;-  optional: &quot;output tag&quot;</span><br></pre></td></tr></table></figure><h2 id="窗口生命周期"><a href="#窗口生命周期" class="headerlink" title="窗口生命周期"></a>窗口生命周期</h2><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><h3 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h3><p>The function will contain the computation to be applied to the contents of the window, while the <code>Trigger</code> specifies the conditions under which the window is considered ready for the function to be applied. A triggering policy might be something like “when the number of elements in the window is more than 4”, or “when the watermark passes the end of the window”. A trigger can also decide to purge a window’s contents any time between its creation and removal. Purging in this case only refers to the elements in the window, and <em>not</em> the window metadata. This means that new data can still be added to that window.</p><p>function包含了窗口中数据的计算逻辑，trigger指定了在哪些条件下会调用这些function</p><h3 id="Evictor"><a href="#Evictor" class="headerlink" title="Evictor"></a>Evictor</h3><p>Apart from the above, you can specify an <code>Evictor</code> (see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/stream/operators/windows.html#evictors">Evictors</a>) which will be able to remove elements from the window after the trigger fires and before and/or after the function is applied.</p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>段落收集</title>
      <link href="2021/01/29/translate/%E6%AE%B5%E8%90%BD/"/>
      <url>2021/01/29/translate/%E6%AE%B5%E8%90%BD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> translate </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单词收集</title>
      <link href="2021/01/29/translate/%E5%8D%95%E8%AF%8D/"/>
      <url>2021/01/29/translate/%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<ol><li>infinite 无限</li><li>finite 有限</li><li>functionality 功能</li><li>snippet 片段</li><li>roadmap 路线图</li><li>assigner 指定人，分配人</li><li>guarantee 保证</li><li>overlap 部分重叠</li><li>attach 归属</li><li>trigger 扳机</li><li>purge 清除</li></ol>]]></content>
      
      
      <categories>
          
          <category> translate </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis与spring整合详解</title>
      <link href="2021/01/28/java/mybatis/%E4%B8%8Espring%E6%95%B4%E5%90%88%E8%AF%A6%E8%A7%A3/"/>
      <url>2021/01/28/java/mybatis/%E4%B8%8Espring%E6%95%B4%E5%90%88%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://km.sankuai.com/page/625188235">mybatis与spring整合</a></p><p>mybatis可以单独使用，也可以与spring进行整合。我们在自己的项目中，需要引入相关依赖，如你的项目管理工具使用的是maven，可以在pom.xml中添加以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis spring 依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--数据库连接池依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--数据库驱动依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在整合之后，框架的之间的依赖关系如下图所示：</p><img src="/2021/01/28/java/mybatis/%E4%B8%8Espring%E6%95%B4%E5%90%88%E8%AF%A6%E8%A7%A3/../../picture/java-mybatis/spring%E4%B8%ADmybatis%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系" style="zoom:33%;"><h1 id="整合一：SqlSessionFactoryBean"><a href="#整合一：SqlSessionFactoryBean" class="headerlink" title="整合一：SqlSessionFactoryBean"></a>整合一：SqlSessionFactoryBean</h1><p>   在单独使用mybatis时，我们通过SqlSessionFactoryBuilder 来创建SqlSessionFactory。当mybatis与spring进行整合时，我们使用mybatis-spring提供的SqlSessionFactoryBean 来替代，SqlSessionFactoryBean实现了 Spring 的 FactoryBean 接口，用于创建 SqlSessionFactory 对象实例。 </p><p>   SqlSessionFactoryBean的配置有2种风格： </p><ul><li>保留mybatis的核心配置文件 </li><li>不保留mybatis的核心配置文件 </li></ul><h2 id="保留mybatis的核心配置文件"><a href="#保留mybatis的核心配置文件" class="headerlink" title="保留mybatis的核心配置文件"></a><strong>保留mybatis的核心配置文件</strong></h2><p>我们将绝大部分关于mybatis的配置依然保留在mybatis的核心配置文件mybatis-config文件中，以下是一个示例： </p><p>mybatis-config.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.tianshouzhi.mybatis.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis/mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>细心的读者注意到，在mybatis-config.xml文件中我们并没有通过<environment>的子元素<dataSource>、<transactionManager>来配置数据源和事务管理器。即使配置了，也会被SqlSessionFactoryBean忽略。我们需要显式的为SqlSessionFactoryBean的dataSource属性引用一个数据源配置，如果不指定，在其初始化时就会抛出异常。 </transactionManager></dataSource></environment></p><p>​    此时SqlSessionFactoryBean配置方式如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!—-SqlSessionFactoryBean-—</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean”&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">     &lt;!--数据源配置--&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">     &lt;property name=&quot;</span><span class="attr">dataSource</span>&quot; <span class="attr">ref</span>=<span class="string">&quot;dataSource”/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">     &lt;!--通过configLocation属性指定mybatis核心配置文件mybatis-config.xml路径--&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">     &lt;property name=&quot;</span><span class="attr">configLocation</span>&quot; <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis/mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数据源使用druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">“your</span> <span class="attr">password</span>&quot;/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver”/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &lt;!--其他配置--&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/bean&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="不保留mybatis的核心配置文件"><a href="#不保留mybatis的核心配置文件" class="headerlink" title="不保留mybatis的核心配置文件"></a><strong>不保留mybatis的核心配置文件</strong></h2><p>   从mybatis-spring 1.3.0之后，我们可以移除mybatis-config.xml文件，将所有关于myabtis的配置都通过SqlSessionFactoryBean来指定。 </p><p>以下配置案例演示了与上述等价的配置： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.tianshouzhi.zebracost.entity”/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &lt;!--从类路径下加载在mybatis/mappers包和它的子包中所有的 MyBatis 映射器 XML 文件--&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &lt;property name=&quot;</span><span class="attr">mapperLocations</span>&quot; <span class="attr">value</span>=<span class="string">&quot;classpath*:mybatis/mappers/**/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mybatis与spring整合后, 通常我们不会再直接使用SqlSessionFactory。mybatis-spring提供了其他更加易于操作的工具类，如SqlSessionTemplate、SqlSessionDaoSupport，当然还有其他更加高级的使用方式，如：MapperFactoryBean，MapperScannerConfigurer。</p><h1 id="整合二：使用SqlSessionTemplate"><a href="#整合二：使用SqlSessionTemplate" class="headerlink" title="整合二：使用SqlSessionTemplate"></a><strong>整合二：使用SqlSessionTemplate</strong></h1><p>   SqlSessionTemplate 是 mybatis-spring 的核心，其实现了SqlSession接口。在使用了SqlSessionTemplate之后，我们不再需要通过SqlSessionFactory.openSession()方法来创建SqlSession实例；使用完成之后，也不要调用SqlSession.close()方法进行关闭。另外，对于事务，SqlSessionTemplate 将会保证使用的 SqlSession 是和当前 Spring 的事务相关的。 </p><p>SqlSessionTemplate依赖于SqlSessionFactory，其配置方式如下所示： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tianshouzhi.mybatis.dao.UserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>   之后我们可以在UserD类中直接进行注入。SqlSessionTemplate 是线程安全的, 可以被多个 DAO 所共享使用，以下是一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String NAMESPACE = <span class="string">&quot;com.tianshouzhi.zebracost.UserMapper&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = sqlSession.selectOne(NAMESPACE + <span class="string">&quot;.selectById&quot;</span>,id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  SqlSessionTemplate本质上是一个代理，关于SqlSessionTemplate的源码分析，后期会抽空编写。</p><h1 id="整合三：继承SqlSessionDaoSupport"><a href="#整合三：继承SqlSessionDaoSupport" class="headerlink" title="整合三：继承SqlSessionDaoSupport"></a><strong>整合三：继承SqlSessionDaoSupport</strong></h1><p>mybatis提供了抽象类SqlSessionDaoSupport，调用其getSqlSession()方法你会得到一个 SqlSessionTemplate,之后可以用于执行 SQL 方法, 就像下面这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String NAMESPACE = <span class="string">&quot;com.tianshouzhi.zebracost.UserMapper&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = getSqlSession().selectOne(NAMESPACE + <span class="string">&quot;.selectById&quot;</span>,id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  SqlSessionDaoSupport 需要一个 sqlSessionFactory 或 sqlSessionTemplate 属性来设置 。如果两者都被设置了 , 那么SqlSessionFactory是被忽略的。由于我们的UserDao类继承了SqlSessionDaoSupport，所以你可以在UserDao类中进行设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tianshouzhi.zebracost.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 或：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tianshouzhi.zebracost.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事实上，如果你提供的是一个SqlSessionFactory，SqlSessionDaoSupport内部也会使用其来构造一个SqlSessionTemplate实例。</p><h1 id="整合四：MapperFactoryBean"><a href="#整合四：MapperFactoryBean" class="headerlink" title="整合四：MapperFactoryBean"></a><strong>整合四：MapperFactoryBean</strong></h1><p>  无论是使用SqlSessionTemplate，还是继承SqlSessionDaoSupport，我们都需要手工编写DAO类的代码。熟悉mybatis同学知道，SqlSession有一个getMapper()方法，可以让我们通过映射器接口的方式来使用mybatis。 </p><p>例如针对有以下UserMapper.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd”&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&lt;mapper namespace=“com.tianshouzhi.mybatis.mapper.UserMapper”&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string">  &lt;select id=&quot;</span>selectById<span class="meta-string">&quot; resultType=&quot;</span>Blog<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    select * from user where id = #&#123;id&#125;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">  &lt;/select&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">  &lt;insert id=&quot;</span>insert<span class="meta-string">&quot; paramterType=&quot;</span>com.tianshouzhi.mybatis.domain.User”&gt;</span></span><br><span class="line">    insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以定义以下UserMapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianshouzhi.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.tianshouzhi.mybatis.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细心的读者注意到： </p><p>1、映射文件的namespace属性值”com.tianshouzhi.mybatis.mapper.UserMapper”就是UserMapper接口的全路径 </p><p>2、映射文件中的<select> 、<insert>元素的id属性值”selectById”、”insert”，对应UserMapper接口中的selectById方法和insert方法。 </insert></select></p><p>之后，我们调用UserMapper接口中的方法，就会执行UserMapper.xml中对应的sql。 </p><p>你甚至可以通过注解的方式直接将sql写到UserMapper接口的方法上，此时你就不再需要UserMapper.xml，如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianshouzhi.mybatis.mapper;</span><br><span class="line"><span class="keyword">import</span> com.tianshouzhi.mybatis.quickstart.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们可以修改mybatis-config.xml中<mapper>元素的resource属性为class属性，指定UserMapper接口的全路径，如下</mapper></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;—&gt;</span></span><br><span class="line"><span class="comment">   &lt;!--使用class属性指定UserMapper接口全路径--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.tianshouzhi.mybatis.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后，我们可以通过以下方式来使用UserMapper接口，更加直观，不容易出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">  User user = mapper.selectById(<span class="number">1</span>);<span class="comment">//等价于执行UserMapper中id属性值为”selectById”的&lt;select&gt;元素中的sql，或者selectById方法上注解的sql</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在与spring进行整合时，是否有更加简单的使用方法呢？能够在一个业务Bean中注入UserMapper接口，不需要通过SqlSession的getMapper来创建。我们期望的使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;create a new user!&quot;</span>+user);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 直接这样操作显然是会报错的，因为UserMapper是一个接口，且不是spring管理的bean，因此无法直接注入。 </p><p>   这个时候，本节的主角MapperFactoryBean登场了，通过如下配置，MapperFactoryBean会针对UserMapper接口创建一个代理，并将其变成spring的一个bean。MapperFactoryBean继承了SqlSessionDaoSupport类，这也是为什么我们先介绍SqlSessionDaoSupport，再介绍MapperFactoryBean的原因。显然的，你可以想到，我们可以为MapperFactoryBean指定一个SqlSessionTemplate或者SqlSessionFactory，如果两个属性都设置了,那么 SqlSessionFactory 就会被忽略。 </p><p>通过以下配置，我们就可以在一个业务bean中直接注入UserMapper接口了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.tianshouzhi.mybatis.mapper.UserMapper&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可能想知道MapperFactoryBean为什么具有这样的魔力，但是这不是本文的重点，本文讲解的是mybatis是如何spring进行整合的。笔者将其会在其他章节分析MapperFactoryBean的源码。 </p><p>   上述方式，已经是mybatis与spring进行时理想的方式了。但是如果你的业务很复杂，有许多的XxxMapper接口要配置，针对每个接口都配置一个MapperFactoryBean，会使得我们的配置文件很臃肿。关于这一点，mybatis团队提供了MapperScannerConfigurer来帮助你解决这个问题。 </p><h1 id="整合五：MapperScannerConfigurer"><a href="#整合五：MapperScannerConfigurer" class="headerlink" title="整合五：MapperScannerConfigurer"></a><strong>整合五：MapperScannerConfigurer</strong></h1><p>   通常我们在开发时，会将同一类型的类放于同一个包下，例如现在我们com.tianshouzhi.mybatis.mappers包下，有两个接口：UserMapper、UserAccountMapper。 </p><p>  MapperScannerConfigurer可以指定扫描某个包，将这个包下的所有接口，自动的为每个映射器接口都注册一个MapperFactoryBean。配置如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.tianshouzhi.mybatis.user.mappers&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  其中：basePackage 属性是让你为映射器接口的包路径。如果的映射器接口位于不同的包下，可以使用分号”;”或者逗号”,”进行分割。如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">“org.tianshouzhi.mybatis.user.mappers;org.tianshouzhi.mybatis.product.mappers</span>&quot; /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 如果你指定的还包含子包，子包中的映射器接口递归地被搜索到。因此对于上述配置，我们可以通过公共的包名”org.tianshouzhi.mybatis”进行简化。如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.tianshouzhi.mybatis&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>你可能想到了，如果指定的公共的包名下面还包含了一些其他的接口，这些接口是你作为其他用途使用到的，并不能作为mybatis的映射器接口来使用。此时，你可以通过markerInterface属性或者annotationClass属性来进行过滤。 </p><p>  对于markerInterface，首先，你需要定义一个标记接口，接口名随意，这个接口中不需要定义任何方法，如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MybatisMapperInterface</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>接着，你需要将你的映射器接口继承MybatisMapperInterface，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">implements</span> <span class="title">MybatisMapperInterface</span></span>&#123;</span><br><span class="line">   <span class="comment">//...映射器方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此时你可以指定MapperScannerConfigurer中指定，只有继承了MybatisMapperInterface接口的子接口，才为其自动注册MapperFactoryBean，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;markerInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.tianshouzhi.mybatis.MybatisMapperInterface&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>对于annotationClass属性，作用是类似的，根据注解进行过滤。一般我们是映射器接口上添加mybatis提供的@Mapper注解进行过滤，你也可以自定义一个注解。配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;annotationClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.ibatis.annotations.Mapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    如果同时指定了markerInterface和annotationClass属性，那么只有同时满足这两个条件的接口才会被注册为MapperFactoryBean。 </p><p>  细心的读者可能意识到了，到目前，我们还没有为MapperScannerConfigurer指定一个SqlSessionFactory，或者SqlSessionTemplate。前面配置MapperFactoryBean的时候，我们已经看到，我们至少需要为其提供一项。之所以不指定，是因为MapperScannerConfigurer将会spring上下文中自动进行寻找类型为SqlSessionFactory，或者SqlSessionTemplate的bean，然后利用其来创建MapperFactoryBean实例。 </p><p>   当然你也可以手工的进行指定任意一个，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">“sqlSessionFactory</span>&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;property name=&quot;sqlSessionTemplate&quot; ref=“sqlSessionTemplate&quot;/&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>然而，sqlSessionFactory和sqlSessionTemplate属性已经不建议使用了。原因在于，这两个属性不支持你使用spring提供的PropertyPlaceholderConfigurer的属性替换。例如你配置了SqlSessionFactoryBean来创建SqlSessionFactory实例，前面已经看到必须为其指定一个dataSource属性。很多用户习惯将数据源的配置放到一个独立的配置文件，如jdbc.properties文件中，之后在spring配置中，通过占位符来替换，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--其他配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于这样的配置，spring在初始化时会报错，因为MapperScannerConfigurer会在PropertyPlaceholderConfigurer初始化之前，就加载dataSource的配置，而此时PropertyPlaceholderConfigurer还未准备好替换的占位符的内容，所以抛出异常。 </p><p>  当然，这个问题并不是无解，我们可以使用sqlSessionFactoryBeanName、sqlSessionTemplateBeanName属性来替代sqlSessionFactory和sqlSessionTemplate属性。如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;property name=&quot;sqlSessionTemplateBeanName&quot; value=&quot;sqlSessionTemplate”/&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>此时，你依然可以放心大胆的在你的数据源配置中，使用占位符了。 </p><p>  事实上，笔者总是建议你，在MapperScannerConfigurer的配置中，显示的指定sqlSessionFactoryBeanName或sqlSessionTemplateBeanName。如果你不指定，MapperScannerConfigurer就会在spring上下文中自动的寻找类型为SqlSessionFactory或者SqlSessionTemplate的bean。如果你的数据源配置中使用了占位符，还是会报错。 </p><p>  最后，你可能想知道，为什么MapperScannerConfigurer指定一个basePackage属性，就可以为包下的每个接口都注册一个MapperFactoryBean？其内部是如何自动在spring上下文中寻找类型为SqlSessionFactory或者SqlSessionTemplate的bean实例的？以及为什么又做了如此多限制，只有指定sqlSessionFactoryBeanName或sqlSessionTemplateBeanName才能在数据源的配置中使用占位符？ </p><p>   关于这些问题，笔者将在MapperScannerConfigurer的源码分析中进行解答。 </p><h1 id="整合六：-MapperScan"><a href="#整合六：-MapperScan" class="headerlink" title="整合六：@MapperScan"></a><strong>整合六：@MapperScan</strong></h1><p>   如果读者习惯使用注解，而不是xml文件的方式进行配置，mybatis-spring提供了@MapperScan注解，其用于取代MapperScannerConfigurer。以下演示了如何通过注解的方式来配置mybatis。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.tianshouzhi.security.mapper”,//等价于MapperScannerConfigurer的basePackage属性</span></span><br><span class="line"><span class="meta">        markerInterface = MybatisMapperInterface.class,//等价于MapperScannerConfigurer的markerInterface属性, 默认为null</span></span><br><span class="line"><span class="meta">        annotationClass = MybatisMapper.class,//等价于MapperScannerConfigurer的annotationClass属性，默认为null</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;sqlSessionFactory&quot;)</span><span class="comment">//等价于MapperScannerConfigurer的sqlSessionFactoryBeanName属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDriverDataSource dataSource = <span class="keyword">new</span> SimpleDriverDataSource();</span><br><span class="line">        dataSource.setUsername(“your username<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        dataSource.setPassword(“you password&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(com.mysql.jdbc.Driver.class);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义SqlSessionFactoryBean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Bean(&quot;sqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean ssfb = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整合七：事务"><a href="#整合七：事务" class="headerlink" title="整合七：事务"></a><strong>整合七：事务</strong></h1><p>  上述所有的配置，还没有涉及到mybatis与spring进行整合另一个核心要点，即事务。整合后，我们需要将事务委派给spring来管理。 </p><p>   spring使用PlatformTransactionManager接口来表示一个事务管理器。其有2个重要的实现类： </p><p>​    DataSourceTransactionManager：用于支持本地事务，简单理解，你可以认为就是操作单个数据库的事务，其内部也是通过操作java.sql.Connection来开启、提交(commit)和回滚(rollback)事务。 </p><p>​    JtaTransactionManager：用于支持分布式事务，其实现了JTA规范，使用XA协议进行两阶段提交。 </p><p>在本文中，我们主要介绍的是DataSourceTransactionManager，绝大部分情况下， 我们使用的都是这个事务管理器。其配置方式如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring 事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认事务超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交失败的话，也进行回滚--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rollbackOnCommitFailure&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于事务管理器使用方式有2种：声明式事务管理、编程式事务管理 </p><h2 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a><strong>声明式事务管理</strong></h2><p><strong>1、基于注解</strong></p><p>首先，你需要配置事务管理是基于注解驱动的，如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>之后，在业务bean的方法上添加@Transactional注解，此时这个方法就自动具备了事务的功能，如果出现异常，会自动回滚，没有出现异常则自动交。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> String out,<span class="keyword">final</span> String in,<span class="keyword">final</span> Double money)</span> </span>&#123;  </span><br><span class="line">            accountMapper.outMoney(out, money);  </span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;  </span><br><span class="line">            accountMapper.inMoney(in, money);  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><p>基于注解的形式的声明式事务管理器，是最为简单的，也是建议使用的方式。 </p><p><strong>2、基于切面</strong></p><p>   如果你有很多方法，都需要有事务管理，你觉得每个方法都添加@Transactional注解比较麻烦，此时你可以使用以下配置取代<a href="tx:annotation-driven">tx:annotation-driven</a>元素。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.配置事务通知：（事务的增强） --&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span>/&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 2.配置切面 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!-- 配置切入点 --&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;tx_pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*com.tianshouzhi.mybatis.AccountService+.*(..))&quot;</span>/&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!-- 配置切面 --&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;tx_pointcut&quot;</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p> 事实上，基于切面的配置，太麻烦了，即使对于一些老鸟，长时间没有编写过类似的配置，可能也无法立即正确的进行配置，没有@Transactional注解来的直观。 </p><h2 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a><strong>编程式事务管理</strong></h2><p>如果上述两种声明式事务的配置都不是你要想要，那么你可以采取编程式事务。你可以在业务bean中注入事务管理器，然后进行编程式事务的管理，如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DataSourceTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> String out,<span class="keyword">final</span> String in,<span class="keyword">final</span> Double money)</span></span>&#123;</span><br><span class="line">      DefaultTransactionDefinition def = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line">      def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">    </span><br><span class="line">      TransactionStatus status = transactionManager.getTransaction(def);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         accountMapper.outMoney(out, money);  </span><br><span class="line">         <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;  </span><br><span class="line">         accountMapper.inMoney(in, money);  </span><br><span class="line">        transactionManager.commit(status);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (MyException ex) &#123;</span><br><span class="line">         transactionManager.rollback(status);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，Spring还提供了一个TransactionTemplate，用于简化编程式事务代码的编写，配置方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.support.TransactionTemplate&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span><span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br></pre></td></tr></table></figure><p>使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> String out,<span class="keyword">final</span> String in,<span class="keyword">final</span> Double money)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//在事务模板中执行操作  </span></span><br><span class="line">    transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult()&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatustransactionstatus)</span></span>&#123;  </span><br><span class="line">        accountMapper.outMoney(out, money);  </span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;  </span><br><span class="line">        accountMapper.inMoney(in, money);  </span><br><span class="line">     &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>总的来说，编程式事务管理还是显得略微麻烦。 </p><h1 id="整合八：springboot"><a href="#整合八：springboot" class="headerlink" title="整合八：springboot"></a><strong>整合八：springboot</strong></h1><p>   mybatis开发团队为Spring Boot 提供了 mybatis-spring-boot-starter。你需要引入如下依赖： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    使用了该starter之后，只需要定义一个DataSource即可，它会自动利用该DataSource创建需要使用到的SqlSessionFactoryBean、SqlSessionTemplate、以及ClassPathMapperScanner来自动扫描你的映射器接口，并针对每个接口都创建一个MapperFactoryBean，注册到Spring上下文中。 </p><p>​    关于mybatis-spring-boot-starter如何实现自动配置的相关源码，参见：org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration类。 </p><p>  默认情况下，扫描的basePackage是spring boot的根目录(这里指的是应用启动类Application.java类所在的目录)，且只会对添加了@Mapper注解的映射器接口进行注册。 </p><p>   因此，最简单的情况下，你只需要在application.yml中进行数据源的相关配置即可，以下配置依赖于spring-boot-starter-jdbc： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">your password</span></span><br></pre></td></tr></table></figure><p> 之后，你就可以直接在你的业务bean中注入映射器接口来使用了。 </p><p>  需要注意的是，一旦你自己提供了MapperScannerConfigurer，或者配置了MapperFactoryBean，那么mybatis-spring-boot-starter的自动配置功能将会失效。此时所有关于mybatis与spring进行整合的配置，都需要由你自行控制。 </p><h1 id="整合九：多数据源"><a href="#整合九：多数据源" class="headerlink" title="整合九：多数据源"></a><strong>整合九：多数据源</strong></h1><p>有的时候，应用需要访问多个数据库，假设现在有两个mysql库db_user、db_acount。这个时候我们就需要配置2个数据源，来连接不同的库，如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ds_user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shxx12151022&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.0.1:3306/db_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--其他配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ds_account&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">“your</span> <span class="attr">password</span>&quot;/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.0.2:3306/db_account&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver”/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &lt;!--其他配置--&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/bean&gt;</span></span></span><br></pre></td></tr></table></figure><p>针对上述的数据源ds_user,ds_account，我们需要为每个都配置一个SqlSessionFactoryBean，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ssf_user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ds_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mybatis/mappers/db_user/**/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ssf_account&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ds_account&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mybatis/mappers/db_account/**/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>细心的读者可能已经注意到，这两个SqlSessionFactoryBean分别操作数据源ds_user、ds_account，且mapperLocations属性值指向的是不同的目录： </p><ul><li><p>在ssf_user中，指定关于ds_user的映射器xml文件都位于类路径的mybatis/mappers/db_user/目录下 </p></li><li><p>在ssf_account中，指定关于ds_account的映射器xml文件都位于类路径的mybatis/mappers/db_account/目录下 </p><p>如果你是使用映射接口的方式来操作mybatis，那么还应该针对ssf_user和ssf_account两个SqlSessionFactoryBean，各配置一个MapperScannerConfigurer。如下：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.tianshouzhi.mybatis.mappers.user&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ssf_user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.tianshouzhi.mybatis.mappers.account&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ssf_account&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，两个MapperScannerConfigurer的basePackage属性是不同的，我们将操作db_user库下的映射器XxxMapper接口都放在com.tianshouzhi.mybatis.mappers.user包中，将我们将操作db_account库下的映射器XxxMapper接口都放在com.tianshouzhi.mybatis.mappers.account包中。 </p><p>  再次提醒，在使用多数据源时，将操作不同库的xml映射文件、以及对应的映射器接口放到不同的目录下很重要，如果不这样，在使用时你几乎100%会遇到问题。</p><p>最后，由于你现在有2个数据源，因此你应该配置两个事务管理器，如： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userTxManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ds_user&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountTxManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ds_account&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你是使用@Transactional注解来进行声明式事务管理，应该要指定你使用的是哪一个事务管理器，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(&quot;accountTxManager&quot;)</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> String out,<span class="keyword">final</span> String in,<span class="keyword">final</span> Double money)</span> </span>&#123;  </span><br><span class="line">            accountMapper.outMoney(out, money);  </span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;  </span><br><span class="line">            accountMapper.inMoney(in, money);  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><p>一个事务管理器，只能保证操作单个库的事务，例如在这里，accountTxManager只能保证db_account库的事务，证userTxManager只能保证db_user库的事务。 </p><p>  如果你在一个方法内，想同时操作两个库，并保证事务，使用普通的DataSourceTransactionManager已经无法满足这种需求，这属于分布式事务的范畴。在笔者的另一篇文章<a href="http://www.tianshouzhi.com/api/tutorials/distributed_transaction/386">atomikos JTA/XA全局事务</a>演示了如何使用atomikos与mybatis、spring进行整合，来进行分布式事务的管理。 </p><h1 id="整合十：zebra"><a href="#整合十：zebra" class="headerlink" title="整合十：zebra"></a>整合十：zebra</h1><p>你应该使用：  </p><p>1、使用zebra-api中提供了GroupDataSource(读写分离)或者ShardDataSource(分库分表)，而不是直接使用第三方的数据库连接池。  </p><p>2、使用zebra-dao提供了ZebraMapperScannerConfigurer替代mybatis-spring原生的MapperScannerConfigurer  </p><p>3、此外，你应该使用zebra-ds-monitor-client，只需引入依赖即可，会自动将连接池的监控信息上报到cat中</p>]]></content>
      
      
      <categories>
          
          <category> java-mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis用法总结</title>
      <link href="2021/01/28/java/mybatis/%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/28/java/mybatis/%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="selectById"><a href="#selectById" class="headerlink" title="selectById"></a>selectById</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;</span></span><br><span class="line"><span class="meta">        &quot;select&quot;,</span></span><br><span class="line"><span class="meta">        &quot;id, source_type, source_id, name, creator, user_type, count, create_mode, status, detail_status, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;build_start_time, build_end_time, import_start_time, import_end_time, front_end, create_time&quot;,</span></span><br><span class="line"><span class="meta">        &quot;from dim_wm_grouping_status&quot;,</span></span><br><span class="line"><span class="meta">        &quot;where id = #&#123;id,jdbcType=INTEGER&#125;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;id&quot;, property=&quot;id&quot;, jdbcType=JdbcType.INTEGER, id=true),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;source_type&quot;, property=&quot;sourceType&quot;, jdbcType=JdbcType.SMALLINT),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;source_id&quot;, property=&quot;sourceId&quot;, jdbcType=JdbcType.BIGINT),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;name&quot;, property=&quot;name&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;creator&quot;, property=&quot;creator&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;user_type&quot;, property=&quot;userType&quot;, jdbcType=JdbcType.INTEGER),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;count&quot;, property=&quot;count&quot;, jdbcType=JdbcType.INTEGER),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;create_mode&quot;, property=&quot;createMode&quot;, jdbcType=JdbcType.SMALLINT),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;status&quot;, property=&quot;status&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;detail_status&quot;, property=&quot;detailStatus&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;build_start_time&quot;, property=&quot;buildStartTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;build_end_time&quot;, property=&quot;buildEndTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;import_start_time&quot;, property=&quot;importStartTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;import_end_time&quot;, property=&quot;importEndTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;front_end&quot;, property=&quot;frontEnd&quot;, jdbcType=JdbcType.LONGVARCHAR),</span></span><br><span class="line"><span class="meta">        @Result(column=&quot;create_time&quot;, property=&quot;createTime&quot;, jdbcType=JdbcType.TIMESTAMP)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">GroupingMsgPo <span class="title">selectById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="selectByCondition"><a href="#selectByCondition" class="headerlink" title="selectByCondition"></a>selectByCondition</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;</span></span><br><span class="line"><span class="meta">    &quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;select&quot;,</span></span><br><span class="line"><span class="meta">            &quot;id, source_type, source_id, name, creator, user_type, count, create_mode, status, detail_status, &quot;,</span></span><br><span class="line"><span class="meta">            &quot;build_start_time, build_end_time, import_start_time, import_end_time, front_end, create_time&quot;,</span></span><br><span class="line"><span class="meta">            &quot;from dim_wm_grouping_status&quot;,</span></span><br><span class="line"><span class="meta">            &quot;where status != &#x27;0&#x27; and create_time between #&#123;startDate&#125; and #&#123;endDate&#125;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;id != null&#x27;&gt; and id=#&#123;id&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;name != null&#x27;&gt; and name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;) &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;creator != null&#x27;&gt; and creator like concat(&#x27;%&#x27;, #&#123;creator&#125;, &#x27;%&#x27;) &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;userType != null and userType.size &gt; 0&#x27; &gt;&quot;,</span></span><br><span class="line"><span class="meta">                &quot;and user_type in &quot;,</span></span><br><span class="line"><span class="meta">                &quot;&lt;foreach collection=&#x27;userType&#x27; item=&#x27;item&#x27; index=&#x27;index&#x27; open=&#x27;(&#x27; close=&#x27;)&#x27; separator=&#x27;,&#x27;&gt;&quot;,</span></span><br><span class="line"><span class="meta">                    &quot;$&#123;item&#125;&quot;,</span></span><br><span class="line"><span class="meta">                &quot;&lt;/foreach&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;createMode != null and createMode.size &gt; 0&#x27; &gt;&quot;,</span></span><br><span class="line"><span class="meta">                &quot;and create_mode in&quot;,</span></span><br><span class="line"><span class="meta">                &quot;&lt;foreach collection=&#x27;createMode&#x27; item=&#x27;item&#x27; index=&#x27;index&#x27; open=&#x27;(&#x27; close=&#x27;)&#x27; separator=&#x27;,&#x27;&gt;&quot;,</span></span><br><span class="line"><span class="meta">                    &quot;#&#123;item&#125;&quot;,</span></span><br><span class="line"><span class="meta">                &quot;&lt;/foreach&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;order by id desc&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;offset != null and pageSize != null&#x27;&gt; limit $&#123;offset&#125;, $&#123;pageSize&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">    &quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;id&quot;, property=&quot;id&quot;, jdbcType=JdbcType.INTEGER, id=true),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;source_type&quot;, property=&quot;sourceType&quot;, jdbcType=JdbcType.SMALLINT),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;source_id&quot;, property=&quot;sourceId&quot;, jdbcType=JdbcType.BIGINT),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;name&quot;, property=&quot;name&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;creator&quot;, property=&quot;creator&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;user_type&quot;, property=&quot;userType&quot;, jdbcType=JdbcType.INTEGER),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;count&quot;, property=&quot;count&quot;, jdbcType=JdbcType.INTEGER),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;create_mode&quot;, property=&quot;createMode&quot;, jdbcType=JdbcType.SMALLINT),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;status&quot;, property=&quot;status&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;detail_status&quot;, property=&quot;detailStatus&quot;, jdbcType=JdbcType.VARCHAR),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;build_start_time&quot;, property=&quot;buildStartTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;build_end_time&quot;, property=&quot;buildEndTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;import_start_time&quot;, property=&quot;importStartTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;import_end_time&quot;, property=&quot;importEndTime&quot;, jdbcType=JdbcType.TIMESTAMP),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;front_end&quot;, property=&quot;frontEnd&quot;, jdbcType=JdbcType.LONGVARCHAR),</span></span><br><span class="line"><span class="meta">            @Result(column=&quot;create_time&quot;, property=&quot;createTime&quot;, jdbcType=JdbcType.TIMESTAMP)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;GroupingMsgPo&gt; <span class="title">selectByCondition</span><span class="params">(UserGroupingMetaBo userGroupingMetaBo)</span></span>;</span><br></pre></td></tr></table></figure><p>分页查询的两个参数，分别是偏移量和size。偏移量需要通过页数和size计算出来。</p><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&#123;</span></span><br><span class="line"><span class="meta">        &quot;insert into dim_wm_grouping_status (source_type, source_id, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;name, creator, user_type, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;count, create_mode, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;status, detail_status, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;build_start_time, build_end_time, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;import_start_time, import_end_time, front_end, create_time)&quot;,</span></span><br><span class="line"><span class="meta">        &quot;values (#&#123;sourceType,jdbcType=SMALLINT&#125;, #&#123;sourceId,jdbcType=BIGINT&#125;, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;#&#123;name,jdbcType=VARCHAR&#125;, #&#123;creator,jdbcType=VARCHAR&#125;, #&#123;userType,jdbcType=INTEGER&#125;, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;#&#123;count,jdbcType=INTEGER&#125;, #&#123;createMode,jdbcType=SMALLINT&#125;, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;#&#123;status,jdbcType=VARCHAR&#125;, #&#123;detailStatus,jdbcType=VARCHAR&#125;, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;#&#123;buildStartTime,jdbcType=TIMESTAMP&#125;, #&#123;buildEndTime,jdbcType=TIMESTAMP&#125;, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;#&#123;importStartTime,jdbcType=TIMESTAMP&#125;, #&#123;importEndTime,jdbcType=TIMESTAMP&#125;, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;#&#123;frontEnd,jdbcType=LONGVARCHAR&#125;, #&#123;createTime,jdbcType=TIMESTAMP&#125;)&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@SelectKey(statement=&quot;SELECT LAST_INSERT_ID()&quot;, keyProperty=&quot;id&quot;, before=false, resultType=Integer.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(GroupingMsgPo record)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="batchInsert"><a href="#batchInsert" class="headerlink" title="batchInsert"></a>batchInsert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&#123;</span></span><br><span class="line"><span class="meta">    &quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;insert into dim_wm_grouping_status (source_type, source_id, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;name, creator, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;user_type, count, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;create_mode, status, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;detail_status, build_start_time, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;build_end_time, import_start_time, &quot;,</span></span><br><span class="line"><span class="meta">        &quot;import_end_time, front_end, create_time)&quot;,</span></span><br><span class="line"><span class="meta">        &quot;values&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;foreach collection=&#x27;list&#x27; item=&#x27;item&#x27; index=&#x27;index&#x27; separator=&#x27;,&#x27;&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot; (#&#123;item.sourceType,jdbcType=SMALLINT&#125;, #&#123;item.sourceId,jdbcType=BIGINT&#125;, &quot;,</span></span><br><span class="line"><span class="meta">            &quot;#&#123;item.name,jdbcType=VARCHAR&#125;, #&#123;item.creator,jdbcType=VARCHAR&#125;, &quot;,</span></span><br><span class="line"><span class="meta">            &quot;#&#123;item.userType,jdbcType=INTEGER&#125;, #&#123;item.count,jdbcType=INTEGER&#125;, &quot;,</span></span><br><span class="line"><span class="meta">            &quot;#&#123;item.createMode,jdbcType=SMALLINT&#125;, #&#123;item.status,jdbcType=VARCHAR&#125;, &quot;,</span></span><br><span class="line"><span class="meta">            &quot;#&#123;item.detailStatus,jdbcType=VARCHAR&#125;, #&#123;item.buildStartTime,jdbcType=TIMESTAMP&#125;, &quot;,</span></span><br><span class="line"><span class="meta">            &quot;#&#123;item.buildEndTime,jdbcType=TIMESTAMP&#125;, #&#123;item.importStartTime,jdbcType=TIMESTAMP&#125;, &quot;,</span></span><br><span class="line"><span class="meta">            &quot;#&#123;item.importEndTime,jdbcType=TIMESTAMP&#125;, #&#123;item.frontEnd,jdbcType=LONGVARCHAR&#125;,&quot;,</span></span><br><span class="line"><span class="meta">            &quot;#&#123;item.createTime,jdbcType=TIMESTAMP&#125;)&quot;,</span></span><br><span class="line"><span class="meta">        &quot;&lt;/foreach&gt;&quot;,</span></span><br><span class="line"><span class="meta">    &quot;&lt;/script&gt;&quot;,</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys=true,keyProperty=&quot;id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">batchInsert</span><span class="params">(<span class="meta">@Param(&quot;list&quot;)</span> List&lt;GroupingMsgPo&gt; list)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&#123;</span></span><br><span class="line"><span class="meta">    &quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;update dim_wm_grouping_status&quot;,</span></span><br><span class="line"><span class="meta">        &quot;set id = #&#123;id,jdbcType=INTEGER&#125;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;sourceType != null&#x27;&gt; ,source_type = #&#123;sourceType,jdbcType=SMALLINT&#125;&lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;sourceId != null&#x27;&gt; ,source_id = #&#123;sourceId,jdbcType=BIGINT&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;name != null&#x27;&gt; ,name = #&#123;name,jdbcType=VARCHAR&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;creator != null&#x27;&gt; ,creator = #&#123;creator,jdbcType=VARCHAR&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;userType != null&#x27;&gt; ,user_type = #&#123;userType,jdbcType=INTEGER&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;count != null&#x27;&gt; ,count = #&#123;count,jdbcType=INTEGER&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;createMode != null&#x27;&gt; ,create_mode = #&#123;createMode,jdbcType=SMALLINT&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;status != null&#x27;&gt; ,status = #&#123;status,jdbcType=VARCHAR&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;detailStatus != null&#x27;&gt; ,detail_status = #&#123;detailStatus,jdbcType=VARCHAR&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;buildStartTime != null&#x27;&gt; ,build_start_time = #&#123;buildStartTime,jdbcType=TIMESTAMP&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;buildEndTime != null&#x27;&gt; ,build_end_time = #&#123;buildEndTime,jdbcType=TIMESTAMP&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;importStartTime != null&#x27;&gt; ,import_start_time = #&#123;importStartTime,jdbcType=TIMESTAMP&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;importEndTime != null&#x27;&gt; ,import_end_time = #&#123;importEndTime,jdbcType=TIMESTAMP&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;frontEnd != null&#x27;&gt; ,front_end = #&#123;frontEnd,jdbcType=LONGVARCHAR&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">            &quot;&lt;if test=&#x27;createTime != null&#x27;&gt; ,create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125; &lt;/if&gt;&quot;,</span></span><br><span class="line"><span class="meta">        &quot;where id = #&#123;id,jdbcType=INTEGER&#125;&quot;,</span></span><br><span class="line"><span class="meta">    &quot;&lt;/script&gt;&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(GroupingMsgPo record)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="用法对比"><a href="#用法对比" class="headerlink" title="用法对比"></a>用法对比</h2><h4 id="jdbcType-”DATE”-和-jdbcType-”TIMESTAMP”-两种类型的区别"><a href="#jdbcType-”DATE”-和-jdbcType-”TIMESTAMP”-两种类型的区别" class="headerlink" title="jdbcType=”DATE” 和 jdbcType=”TIMESTAMP” 两种类型的区别"></a><a href="https://blog.csdn.net/u010526028/article/details/74315775">jdbcType=”DATE” 和 jdbcType=”TIMESTAMP” 两种类型的区别</a></h4><ol><li>DATE只有年月日，没有时分秒</li></ol>]]></content>
      
      
      <categories>
          
          <category> java-mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flink数据源</title>
      <link href="2021/01/27/flink/flink%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>2021/01/27/flink/flink%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/boling_cavalry/article/details/105467076">Flink的DataSource三部曲之一：直接API</a></p><p><a href="https://blog.csdn.net/boling_cavalry/article/details/105471798">Flink的DataSource三部曲之二:内置connector</a></p><p><a href="https://blog.csdn.net/boling_cavalry/article/details/105472218">Flink的DataSource三部曲之三:自定义</a></p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>log4j配置及变量</title>
      <link href="2021/01/27/java/component/log4j/"/>
      <url>2021/01/27/java/component/log4j/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/caolaosanahnu/article/details/7366555">log4j配置文件中使用变量</a></p><p>原理：运行时，在程序中将变量添加到系统变量中</p><h3 id="输出格式控制"><a href="#输出格式控制" class="headerlink" title="输出格式控制"></a>输出格式控制</h3><p><a href="https://blog.csdn.net/guoquanyou/article/details/5689652">Log4j输出格式控制–log4j的PatternLayout参数含义</a></p>]]></content>
      
      
      <categories>
          
          <category> java-组件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/27/flink/flink%E9%85%8D%E7%BD%AElog4j/"/>
      <url>2021/01/27/flink/flink%E9%85%8D%E7%BD%AElog4j/</url>
      
        <content type="html"><![CDATA[<p>因为本地测试中，本地构建的数据源并非预想中的单线程运行，所以想看下线程id，以确定是否每次都新起了线程。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java零散问题汇总</title>
      <link href="2021/01/27/java/problem/%E9%9B%B6%E6%95%A3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/01/27/java/problem/%E9%9B%B6%E6%95%A3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>当输出在sleep之后时，无法打印</p><p>怀疑原因是因为线程被挂起，无法继续执行，但为什么每个线程都无法被唤醒？需要看下唤醒逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;orderInfo:&quot;</span> + orderInfo);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java-problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flink实践问题汇总</title>
      <link href="2021/01/27/flink/%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/01/27/flink/%E5%AE%9E%E8%B7%B5%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="待整理"><a href="#待整理" class="headerlink" title="待整理"></a>待整理</h2><ol><li>本地自定义数据源，会启动多个线程，且不会停止，无法控制单线程输入</li></ol><h3 id="本地自定义数据源，运行起来不停止"><a href="#本地自定义数据源，运行起来不停止" class="headerlink" title="本地自定义数据源，运行起来不停止"></a>本地自定义数据源，运行起来不停止</h3><details><summary>日志记录</summary><pre><code>2021-01-27 16:58:23 Source: operation_data_stream (1/1) ERROR LocalOperationSource:53 - loop:22021-01-27 16:58:23 Source: operation_data_stream (1/1) ERROR LocalOperationSource:54 - operationInfo:&#123;"operationTimeStamp":"2021-01-27 16:58:23","pageId":"30001","sessionId":"abcd","unionId":"123","userId":"user_123"&#125;2021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:47 - loop:22021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:48 - orderInfo:&#123;"orderId":10001,"orderTimeStamp":"2021-01-27 16:58:23","price":39.8,"spuList":["spu1","spu2","spu3"],"unionId":"123","userId":"user_123"&#125;2021-01-27 16:58:23 Source: operation_data_stream (1/1) ERROR LocalOperationSource:53 - loop:22021-01-27 16:58:23 Source: operation_data_stream (1/1) ERROR LocalOperationSource:54 - operationInfo:&#123;"operationTimeStamp":"2021-01-27 16:58:23","pageId":"30001","sessionId":"abcd","unionId":"123","userId":"user_123"&#125;2021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:47 - loop:22021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:48 - orderInfo:&#123;"orderId":10001,"orderTimeStamp":"2021-01-27 16:58:23","price":39.8,"spuList":["spu1","spu2","spu3"],"unionId":"123","userId":"user_123"&#125;2021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:47 - loop:22021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:48 - orderInfo:&#123;"orderId":10001,"orderTimeStamp":"2021-01-27 16:58:23","price":39.8,"spuList":["spu1","spu2","spu3"],"unionId":"123","userId":"user_123"&#125;2021-01-27 16:58:23 Source: operation_data_stream (1/1) ERROR LocalOperationSource:53 - loop:22021-01-27 16:58:23 Source: operation_data_stream (1/1) ERROR LocalOperationSource:54 - operationInfo:&#123;"operationTimeStamp":"2021-01-27 16:58:23","pageId":"30001","sessionId":"abcd","unionId":"123","userId":"user_123"&#125;2021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:47 - loop:22021-01-27 16:58:23 Source: order_data_stream (1/1) ERROR LocalOrderSource:48 - orderInfo:&#123;"orderId":10001,"orderTimeStamp":"2021-01-27 16:58:23","price":39.8,"spuList":["spu1","spu2","spu3"],"unionId":"123","userId":"user_123"&#125;</code></pre></details><p>现象：</p><ol><li>两个数据源，都不断输出loop:2的记录，不会执行到loop:1，如果删除掉 <code>Thread.sleep()</code> 可以执行到loop:1</li><li>不会停止，按理说只应该执行一次loop:2</li></ol><p>原因：</p><ol><li>估计是<code>Thread.sleep()</code>把线程挂起后，无法唤醒，所以执行不到loop:1</li><li>可以判断与数据源无关，是受后续的处理方式影响的，如果直接sink，不会有问题2</li></ol>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flink官网目录</title>
      <link href="2021/01/27/flink/%E5%AE%98%E7%BD%91%E7%9B%AE%E5%BD%95/"/>
      <url>2021/01/27/flink/%E5%AE%98%E7%BD%91%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://flink.apache.org/">Apache Flink</a></p><p><a href="https://ci.apache.org/projects/flink/flink-docs-stable/#apache-flink-documentation">Apache Flink Documentation</a></p><p><a href="https://github.com/apache/flink">git地址</a></p><p><a href="https://ci.apache.org/projects/flink/">不同版本根目录</a></p><p>算子</p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java命令</title>
      <link href="2021/01/26/shell/java%E5%91%BD%E4%BB%A4/"/>
      <url>2021/01/26/shell/java%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="查看jar包中是否包含某个文件"><a href="#查看jar包中是否包含某个文件" class="headerlink" title="查看jar包中是否包含某个文件"></a>查看jar包中是否包含某个文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar vtf analysis-tool-1.0.0-SNAPSHOT.jar application.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>idea问题汇总</title>
      <link href="2021/01/26/tools/idea/idea%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/01/26/tools/idea/idea%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="执行main函数无反应"><a href="#执行main函数无反应" class="headerlink" title="执行main函数无反应"></a>执行main函数无反应</h4><p>​    <a href="https://blog.csdn.net/weixin_39433059/article/details/109511733">Idea运行main方法没反应</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>idea软件使用教程</title>
      <link href="2021/01/26/tools/idea/idea%E8%AE%B2%E8%A7%A3/"/>
      <url>2021/01/26/tools/idea/idea%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h3><p><a href="https://www.cnblogs.com/deng-cc/p/6416332.html">理解 IntelliJ IDEA 的项目配置和Web部署</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NoSuchMethod错误排查</title>
      <link href="2021/01/22/java/problem/NoSuchMethod/"/>
      <url>2021/01/22/java/problem/NoSuchMethod/</url>
      
        <content type="html"><![CDATA[<ol><li>如果包含了不同版本的包，它的加载顺序是如何的？</li><li>NoSuchMethod的报错是error级别的，exception是catch不住的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java-problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flink窗口类</title>
      <link href="2021/01/22/flink/flink%E7%AA%97%E5%8F%A3%E7%B1%BB/"/>
      <url>2021/01/22/flink/flink%E7%AA%97%E5%8F%A3%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<ul><li>WindowAssigner<ul><li>SlidingProcessingTimeWindows</li><li>BaseAlignedWindowAssigner<ul><li>SlidingAlignedProcessingTimeWindows</li></ul></li><li>TumblingEventTimeWindows<ul><li>TumblingTimeWindows</li></ul></li><li>MergingWindowAssigner<ul><li>ProcessingTimeSessionWindows</li><li>DynamicProcessingTimeSessionWindows</li><li>DynamicEventTimeSessionWindows</li><li>EventTimeSessionWindows</li></ul></li><li>TumblingProcessingTimeWindows</li><li>SlidingEventTimeWindows<ul><li>SlidingTimeWindows</li></ul></li><li>GlobalWindows</li></ul></li></ul><h2 id="WindowAssigner"><a href="#WindowAssigner" class="headerlink" title="WindowAssigner"></a>WindowAssigner</h2><h3 id="1-SlidingProcessingTimeWindows"><a href="#1-SlidingProcessingTimeWindows" class="headerlink" title="1. SlidingProcessingTimeWindows"></a>1. SlidingProcessingTimeWindows</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> WindowAssigner&#125; that windows elements into sliding windows based on the current</span></span><br><span class="line"><span class="comment"> * system time of the machine the operation is running on. Windows can possibly overlap.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, in order to window into windows of 1 minute, every 10 seconds:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; in = ...;</span></span><br><span class="line"><span class="comment"> * KeyedStream&lt;String, Tuple2&lt;String, Integer&gt;&gt; keyed = in.keyBy(...);</span></span><br><span class="line"><span class="comment"> * WindowedStream&lt;Tuple2&lt;String, Integer&gt;, String, TimeWindows&gt; windowed =</span></span><br><span class="line"><span class="comment"> *   keyed.window(SlidingProcessingTimeWindows.of(Time.of(1, MINUTES), Time.of(10, SECONDS));</span></span><br><span class="line"><span class="comment"> * &#125; &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于flink处理时间的滑动窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="6-SlidingEventTimeWindows"><a href="#6-SlidingEventTimeWindows" class="headerlink" title="6. SlidingEventTimeWindows"></a>6. SlidingEventTimeWindows</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> WindowAssigner&#125; that windows elements into sliding windows based on the timestamp of the</span></span><br><span class="line"><span class="comment"> * elements. Windows can possibly overlap.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, in order to window into windows of 1 minute, every 10 seconds:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; in = ...;</span></span><br><span class="line"><span class="comment"> * KeyedStream&lt;Tuple2&lt;String, Integer&gt;, String&gt; keyed = in.keyBy(...);</span></span><br><span class="line"><span class="comment"> * WindowedStream&lt;Tuple2&lt;String, Integer&gt;, String, TimeWindow&gt; windowed =</span></span><br><span class="line"><span class="comment"> *   keyed.window(SlidingEventTimeWindows.of(Time.minutes(1), Time.seconds(10)));</span></span><br><span class="line"><span class="comment"> * &#125; &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于元素时间的滑动窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="6-1-SlidingTimeWindows-废弃"><a href="#6-1-SlidingTimeWindows-废弃" class="headerlink" title="6.1 SlidingTimeWindows(废弃)"></a>6.1 SlidingTimeWindows(废弃)</h4><h3 id="2-BaseAlignedWindowAssigner"><a href="#2-BaseAlignedWindowAssigner" class="headerlink" title="2. BaseAlignedWindowAssigner"></a>2. BaseAlignedWindowAssigner</h3><h4 id="1-1-SlidingAlignedProcessingTimeWindows"><a href="#1-1-SlidingAlignedProcessingTimeWindows" class="headerlink" title="1.1 SlidingAlignedProcessingTimeWindows"></a>1.1 SlidingAlignedProcessingTimeWindows</h4><h3 id="5-TumblingProcessingTimeWindows"><a href="#5-TumblingProcessingTimeWindows" class="headerlink" title="5. TumblingProcessingTimeWindows"></a>5. TumblingProcessingTimeWindows</h3><h3 id="3-TumblingEventTimeWindows"><a href="#3-TumblingEventTimeWindows" class="headerlink" title="3. TumblingEventTimeWindows"></a>3. TumblingEventTimeWindows</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> WindowAssigner&#125; that windows elements into windows based on the timestamp of the</span></span><br><span class="line"><span class="comment"> * elements. Windows cannot overlap.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, in order to window into windows of 1 minute:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; in = ...;</span></span><br><span class="line"><span class="comment"> * KeyedStream&lt;Tuple2&lt;String, Integer&gt;, String&gt; keyed = in.keyBy(...);</span></span><br><span class="line"><span class="comment"> * WindowedStream&lt;Tuple2&lt;String, Integer&gt;, String, TimeWindow&gt; windowed =</span></span><br><span class="line"><span class="comment"> *   keyed.window(TumblingEventTimeWindows.of(Time.minutes(1)));</span></span><br><span class="line"><span class="comment"> * &#125; &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="3-1-TumblingTimeWindows-废弃"><a href="#3-1-TumblingTimeWindows-废弃" class="headerlink" title="3.1 TumblingTimeWindows(废弃)"></a>3.1 TumblingTimeWindows(废弃)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> WindowAssigner&#125; that windows elements into windows based on the timestamp of the</span></span><br><span class="line"><span class="comment"> * elements. Windows cannot overlap.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> Please use &#123;<span class="doctag">@link</span> TumblingEventTimeWindows&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="4-MergingWindowAssigner"><a href="#4-MergingWindowAssigner" class="headerlink" title="4. MergingWindowAssigner"></a>4. MergingWindowAssigner</h3><h4 id="4-1-ProcessingTimeSessionWindows"><a href="#4-1-ProcessingTimeSessionWindows" class="headerlink" title="4.1 ProcessingTimeSessionWindows"></a>4.1 ProcessingTimeSessionWindows</h4><h4 id="4-2-DynamicProcessingTimeSessionWindows"><a href="#4-2-DynamicProcessingTimeSessionWindows" class="headerlink" title="4.2 DynamicProcessingTimeSessionWindows"></a>4.2 DynamicProcessingTimeSessionWindows</h4><h4 id="4-3-DynamicEventTimeSessionWindows"><a href="#4-3-DynamicEventTimeSessionWindows" class="headerlink" title="4.3 DynamicEventTimeSessionWindows"></a>4.3 DynamicEventTimeSessionWindows</h4><h4 id="4-4-EventTimeSessionWindows"><a href="#4-4-EventTimeSessionWindows" class="headerlink" title="4.4 EventTimeSessionWindows"></a>4.4 EventTimeSessionWindows</h4><h3 id="7-GlobalWindows"><a href="#7-GlobalWindows" class="headerlink" title="7. GlobalWindows"></a>7. GlobalWindows</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li><strong>滑动窗口</strong></li></ol><ul><li>每条数据会发送到多个滑动窗口中，即在最终的输出中，一条数据要被统计多次</li><li>适合统计据当前时间往前一段时间内的数据汇总</li></ul><ol start="2"><li><strong>滚动窗口</strong></li></ol><ul><li>每条数据只会在一个滚动窗口中</li><li>适合对数据进行简单聚合后，再次聚合的场景</li><li>适合输出明细，不做聚合的场景，比如join后直接输出</li></ul><h3 id="占用内存比较"><a href="#占用内存比较" class="headerlink" title="占用内存比较"></a>占用内存比较</h3><ol><li><strong>滑动窗口</strong><ul><li><em>理论上一条数据会复制到多个窗口，被复制几次，占用内存就会扩大几倍，但不清楚是否有优化，比如只复制数据的引用？</em></li><li></li></ul></li><li><strong>滚动窗口</strong></li></ol><h3 id="关于时间点"><a href="#关于时间点" class="headerlink" title="关于时间点"></a>关于时间点</h3><h4 id="窗口的开始时间"><a href="#窗口的开始时间" class="headerlink" title="窗口的开始时间"></a>窗口的开始时间</h4><ol><li>首先要明确的是，开始时间只与system time和offset参数相关，与程序开始运行时间无关</li><li>比如设置了窗口size是1h，那么在</li></ol><h4 id="窗口的结束时间"><a href="#窗口的结束时间" class="headerlink" title="窗口的结束时间"></a>窗口的结束时间</h4>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hive常用函数</title>
      <link href="2021/01/21/sql/hive/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>2021/01/21/sql/hive/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><h5 id="8位dt转10位"><a href="#8位dt转10位" class="headerlink" title="8位dt转10位"></a>8位dt转10位</h5><p><code>from_unixtime(unix_timestamp(t.dt,&#39;yyyymmdd&#39;),&#39;yyyy-mm-dd&#39;)</code></p><h5 id="8位减1小时"><a href="#8位减1小时" class="headerlink" title="8位减1小时"></a>8位减1小时</h5><p>dt格式2019120100<br><code>from_unixtime(unix_timestamp(dt,&#39;yyyyMMddHH&#39;) - 60*60, &#39;yyyy-MM-dd&#39;)</code></p><h5 id="8位日期计算"><a href="#8位日期计算" class="headerlink" title="8位日期计算"></a>8位日期计算</h5><p><code>regexp_replace(date_sub(from_unixtime(unix_timestamp(t.dt,&#39;yyyymmdd&#39;),&#39;yyyy-mm-dd&#39;), 10), &#39;-&#39;, &#39;&#39;)</code></p><h5 id="当前日期前一天"><a href="#当前日期前一天" class="headerlink" title="当前日期前一天"></a>当前日期前一天</h5><h5 id="保留2位小数"><a href="#保留2位小数" class="headerlink" title="保留2位小数"></a>保留2位小数</h5><p><code>round(123.4567, 2)</code></p><h5 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">hour</span>(from_unixtime(event_timestamp/<span class="number">1000</span>,<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) hour_time, <span class="keyword">count</span>(<span class="keyword">distinct</span> session_id)</span><br><span class="line"><span class="keyword">from</span> mart_eif_flow.bas_log_sdk_waimai_c <span class="keyword">where</span> dt=<span class="string">&#x27;20201217&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">hour</span>(from_unixtime(event_timestamp/<span class="number">1000</span>,<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="keyword">order</span> <span class="keyword">by</span> hour_time</span><br></pre></td></tr></table></figure><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><h5 id="保留小数"><a href="#保留小数" class="headerlink" title="保留小数"></a>保留小数</h5>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hive-官网索引</title>
      <link href="2021/01/21/sql/hive/%E5%AE%98%E7%BD%91%E7%B4%A2%E5%BC%95/"/>
      <url>2021/01/21/sql/hive/%E5%AE%98%E7%BD%91%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cwiki.apache.org/confluence/display/Hive/Home#Home-GeneralInformationaboutHive">https://cwiki.apache.org/confluence/display/Hive/Home#Home-GeneralInformationaboutHive</a></p><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual">https://cwiki.apache.org/confluence/display/Hive/LanguageManual</a></p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a><a href="https://cwiki.apache.org/confluence/display/Hive/Home">首页</a></h2><h2 id="语法手册"><a href="#语法手册" class="headerlink" title="语法手册"></a><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual">语法手册</a></h2><h3 id="1-命令行与客户端"><a href="#1-命令行与客户端" class="headerlink" title="1. 命令行与客户端"></a>1. 命令行与客户端</h3><h4 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types">数据类型</a></h4><ol><li>数据类型转换(Change Types)</li><li>数据类型隐式转换矩阵(Allowed Implicit Conversions)</li></ol><h4 id="1-2-参数配置"><a href="#1-2-参数配置" class="headerlink" title="1.2 参数配置"></a>1.2 <a href="https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties">参数配置</a></h4><ol><li>常用参数配置</li></ol><h4 id="1-3-select语法"><a href="#1-3-select语法" class="headerlink" title="1.3 select语法"></a>1.3 <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select">select语法</a></h4><ol><li>All and DISTINCT 语句，UNION语句可以有相同效果</li><li>Partition Based Queries</li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-HAVINGClause">HAVING Clause</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-REGEXColumnSpecification">REGEX Column Specification</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+GroupBy">GROUP BY</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+SortBy">SORT/ORDER/CLUSTER/DISTRIBUTE BY</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Joins">JOIN</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Union">UNION</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Sampling">TABLESAMPLE</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+SubQueries">Subqueries</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+VirtualColumns">Virtual Columns</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF">Operators and UDFs</a> <strong>hive函数</strong></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+LateralView">LATERAL VIEW</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics">Windowing, OVER, and Analytics</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/Common+Table+Expression">Common Table Expressions</a> 临时表语法</li></ol>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="2021/01/20/mac/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2021/01/20/mac/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h2><p>刷新 <code>command ＋r</code></p><p>强制刷新 <code>command＋shift＋r</code></p><p>删除cookie<code>command＋shift＋del</code>点击 清除数据 注意勾选的选项（不要把保存的密码也删除）</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>术语</title>
      <link href="2021/01/20/concept/%E6%9C%AF%E8%AF%AD/"/>
      <url>2021/01/20/concept/%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<p>SOP(Standard Operating Procedure) 标准作业程序</p>]]></content>
      
      
      <categories>
          
          <category> 概念 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="2021/01/20/tools/hexo/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/01/20/tools/hexo/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="源码提交"><a href="#源码提交" class="headerlink" title="源码提交"></a>源码提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b blog-source</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;init blog&quot;</span><br><span class="line">git push origin blog-source</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/111639860">如何用 Github 搭建博客</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常见报错</title>
      <link href="2021/01/20/tools/hexo/hexo%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/"/>
      <url>2021/01/20/tools/hexo/hexo%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="bad-indentation-of-a-mapping-entry"><a href="#bad-indentation-of-a-mapping-entry" class="headerlink" title="bad indentation of a mapping entry"></a>bad indentation of a mapping entry</h3><ol><li>title中缩进不正常，均要用tab缩进</li></ol><h3 id="warning-adding-embedded-git-repository-themes-next"><a href="#warning-adding-embedded-git-repository-themes-next" class="headerlink" title="warning: adding embedded git repository: themes/next"></a>warning: adding embedded git repository: themes/next</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">warning: adding embedded git repository: themes&#x2F;next</span><br><span class="line">hint: You&#39;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the contents of</span><br><span class="line">hint: the embedded repository and will not know how to obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint:</span><br><span class="line">hint: git submodule add &lt;url&gt; themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: If you added this path by mistake, you can remove it from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint:</span><br><span class="line">hint: git rm --cached themes&#x2F;next</span><br><span class="line">hint:</span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1583762">git仓库包含子仓库时，add报错的解决办法</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/tappat/article/details/103299038">hexo部署成功仍未更新或无法打开的情况</a></p><p><a href="https://github.com/iissnan/hexo-theme-next/issues/1050">修改scheme后发布不起作用</a></p><p><a href="https://www.tuziang.com/combat/904.html">Hexo博客 Next更换修改主题样式 不生效的解决</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>疑问</title>
      <link href="2021/01/20/flink/%E7%96%91%E9%97%AE/"/>
      <url>2021/01/20/flink/%E7%96%91%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="怎么理解flink的有状态"><a href="#怎么理解flink的有状态" class="headerlink" title="怎么理解flink的有状态"></a>怎么理解flink的有状态</h4>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建模方法</title>
      <link href="2021/01/20/olap/%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95/"/>
      <url>2021/01/20/olap/%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/109782553">数据仓库建设中的数据建模方法</a></p><h2 id="实体建模"><a href="#实体建模" class="headerlink" title="实体建模"></a>实体建模</h2><p><a href="https://blog.csdn.net/yaoyelinger0912/article/details/95517168">数据建模-建模方法三：实体建模</a></p><p>实体建模法也有着自己先天的缺陷，由于实体说明法只是一种抽象客观世界的方法，因此，<strong>注定了该建模方法<br>只能局限在业务建模和领域概念建模阶段。因此，到了逻辑建模阶段和物理建模阶段，则是范式建模和维度建模发挥长处的阶段</strong></p><p>实体是现实世界中存在的事物或发生的事件，是现实世界中任何可识别、可区分的事物。实体可以是人，可以是物，也可以是发生的某件事，比如一场篮球比赛。每一个实体都必须具备一定的特征，用来区分一个个实体，这些特征称为属性，每个实体可以用若干个属性来刻画，每个属性又有一定的取值类型和取值范围，属性是变量，其取值范围是属性的值域。实体建模法是根据客观世界中的一个个实体，以及实体之间的关系，在数据建模的过程中引入这种区分方法，将整个业务分成一个个实体，从而建立数据模型。实体建模可以比较容易的实现模型的划分，抽象出具体的业务概念，创建符合自己需要的数据库模型。实体建模是对客观世界的抽象，因此该方法建立的模型具有一定的局限性，适合于特定的领域。</p><h2 id="维度建模法"><a href="#维度建模法" class="headerlink" title="维度建模法"></a>维度建模法</h2><p>维度在数学上指独立参数的数据，在数据分析领域，是指描述事物的角度和方面，是数据库当中，描述某一事物的方法和属性的数目。维度建模就是针对给定的事物，使用不同的描述方法，记录该事物在不同分类方法当中每个属性的值。如对人进行维度建模时，按照性别的维度可以分为男和女，按照年龄段可以分为儿童、少年、青年、中年、老年，按照收入水平可以分为3000以下、3000-6000、6000-10000，10000以上等集中类别。</p><p> 维度建模法的好处是对于某个事物，可以在各个维度进行预处理，进行统计、分类、排序等，提高数据库操作性能，同时维度建模法建立的数据模型比较直观，可以紧密围绕业务需求建立模型，直观的反应业务中的问题，建模方法简单，不需要进行特别的抽象处理。但是维度建模法同时也存在缺点，一是在数据建模时需要进行预处理，存在大量的预处理工作，并且当业务需求发生变化时，需要重新定义维度，重新进行新维度的数据预处理，在数据预处理过程中往往存在大量数据冗余，另外就是在进行维度建模时，仅仅依靠维度进行建模，不能保证数据来源的准确性和一致性，不适合在数据库底层使用。</p><h2 id="范式建模法"><a href="#范式建模法" class="headerlink" title="范式建模法"></a>范式建模法</h2><p>范式就是规则，是符合某一级别关系模式的集合，构造数据库时必须遵循一定的规则。关系数据库中的关系必须满足一定的规则，即满足不同的范式。</p><p> 范式建模法是将原始数据信息根据一定的数据结构和转换模型，分解、转化为规范的格式，使数据遵守一定的约束条件，每一个数据项所表达的意思明确，不产生歧义，同时各条数据之间相互独立，不存在依赖关系。</p><h2 id="建模过程"><a href="#建模过程" class="headerlink" title="建模过程"></a>建模过程</h2><ol><li></li></ol><p>3NF范式建模，实体模型中的关系作为fact表，实体作为维度表</p>]]></content>
      
      
      <categories>
          
          <category> olap </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础语法</title>
      <link href="2021/01/19/sql/mysql/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>2021/01/19/sql/mysql/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><h3 id="1-单条更新"><a href="#1-单条更新" class="headerlink" title="1. 单条更新"></a>1. 单条更新</h3><h3 id="2-批量更新"><a href="#2-批量更新" class="headerlink" title="2. 批量更新"></a>2. 批量更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mytable </span><br><span class="line">SET myfield &#x3D; CASE other_field </span><br><span class="line">WHEN 1 THEN &#39;value&#39; </span><br><span class="line">WHEN 2 THEN &#39;value&#39; </span><br><span class="line">WHEN 3 THEN &#39;value&#39; </span><br><span class="line">END </span><br><span class="line">WHERE id IN (1,2,3) </span><br></pre></td></tr></table></figure><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><h3 id="1-limit"><a href="#1-limit" class="headerlink" title="1. limit"></a>1. limit</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语句1：<span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">limit</span> <span class="number">9</span>,<span class="number">4</span> //第一个参数表示从该参数的下一条数据开始，第二个参数表示每次返回的数据条数。</span><br><span class="line">语句<span class="number">2</span>：slect * <span class="keyword">from</span> student <span class="keyword">limit</span> <span class="number">4</span> <span class="keyword">offset</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ahang/p/5644535.html">mysql limit分页</a></p>]]></content>
      
      
      <categories>
          
          <category> sql-mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见安全漏洞及解决方案</title>
      <link href="2021/01/19/java/web/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2021/01/19/java/web/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><a href="https://km.sankuai.com/page/57489507">sql注入漏洞</a></p><p>修复方案：<br>如果拼接参数是SQL的查询参数都可以通过将mybatis配置文件中的 $ 改为 #，来解决<br>替换规则如下：<br>1.将 WHERE <code>some_field</code> = ‘${变量}’ 替换为 WHERE <code>some_field</code> = #{param}</p><p>2.将 like ‘%${变量}%’ 替换为 like concat(‘%’, #{变量}, ‘%’)</p><p>3.将 like concat(‘%’, ${变量}, ‘%’) 替换成 like concat(‘%’, #{变量}, ‘%’)</p><p>4.将 WHERE <code>some_field</code> IN (${变量}) 替换为</p><p>WHERE <code>some_field</code> IN</p><p>#{item}</p><p>对于拼接的变量不是SQL参数的，而是字段名、表名的情况，可以使用安全SDK检查输入是否是合法的标识符。<br>1.pom 引入安全SDK依赖</p><p>com.sankuai.security<br>sec-sdk<br>${尽可能最新版本}</p><p>\2. 代码中检查输入的变量的值是否是合法的标识符。<br>String sortName = req.getParameter(“sortName”);<br>if (sortName != null &amp;&amp; !SecSdk.isValidSqlIdentifier(sortName)) {<br>// 危险，可能有SQL注入，<br>// return or throw exception<br>}</p><p>参考文档：<br>SQL注入介绍：<a href="https://sectraining.sankuai.com/?source=source-scanner/#/document/30001">https://sectraining.sankuai.com/?source=source-scanner/#/document/30001</a><br>安全SDK文档：<a href="https://km.sankuai.com/page/234776924">https://km.sankuai.com/page/234776924</a></p><p><a href="https://km.sankuai.com/page/155875683">CORS 安全配置不当</a></p><p><a href="https://km.sankuai.com/page/68078369">XSS 跨站脚本攻击</a></p><p><a href="https://km.sankuai.com/page/64887091">越权类安全问题</a></p>]]></content>
      
      
      <categories>
          
          <category> java-web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>待整理</title>
      <link href="2021/01/19/flink/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/19/flink/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://blog.csdn.net/hellojoy/article/details/101455711">Flink 原理与实现：理解 Flink 中的计算资源</a></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><a href="https://www.infoq.cn/article/sihs_qy6hcpmqnblti9m">Flink 滑动窗口优化</a></p><p>超长滑动窗口优化及解决方案</p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p><a href="https://www.cnblogs.com/xiexiandong/p/12770187.html">flink系列-4、flink自定义source、sink</a></p><p><a href="https://www.sohu.com/a/318353586_99973460">Flink 如何自定义Source</a></p><p><a href="https://blog.csdn.net/weixin_43161811/article/details/88942806">Flink-04-Flink自定义Source</a></p><p><a href="https://blog.csdn.net/duxu24/article/details/105547283">Flink——自定义Source</a></p><p><a href="https://cloud.tencent.com/developer/article/1694062">5分钟Flink - 自定义Source源</a></p><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p><a href="https://blog.csdn.net/huzechen/article/details/102548858">Flink如何实现3个实时流同时join,leftjoin,rightjoin</a></p><p><a href="https://blog.csdn.net/qq_37142346/article/details/90176504">Flink Operator之CoGroup、Join以及Connect</a></p><h2 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h2><p><a href="https://zhuanlan.zhihu.com/p/136671137">richXXXFunction的open,clone方法执行</a></p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Colocate join</title>
      <link href="2021/01/18/doris/Colocate%20Join/"/>
      <url>2021/01/18/doris/Colocate%20Join/</url>
      
        <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.bcmeng.com/post/doris-colocate-join.html">Apache Doris Colocate Join 原理与实践</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> doris </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>待整理</title>
      <link href="2021/01/10/python/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/10/python/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖准备"><a href="#依赖准备" class="headerlink" title="依赖准备"></a>依赖准备</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>pycharm切换/添加python版本</li><li>python安装</li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ol><li>pip3 install PyMySQL</li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><p><a href="https://blog.csdn.net/weixin_42269023/article/details/80719992">Python 占位符的使用</a></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p><a href="https://www.runoob.com/python/python-exceptions.html">Python 异常处理</a></p><p><a href="https://www.cnblogs.com/aircoder/p/4415387.html">python expect 工作的使用代码</a></p><h3 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h3><p><a href="https://www.cnblogs.com/erchun/p/11766408.html">python-写入文件</a></p><h2 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h2><h3 id="PyMysql"><a href="#PyMysql" class="headerlink" title="PyMysql"></a>PyMysql</h3><p><a href="https://blog.csdn.net/xiaosongshupy/article/details/78462553">pymysql.connect()参数说明</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>疑问</title>
      <link href="2021/01/10/doris/%E7%96%91%E9%97%AE/"/>
      <url>2021/01/10/doris/%E7%96%91%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="doris的分区规则"><a href="#doris的分区规则" class="headerlink" title="doris的分区规则"></a>doris的分区规则</h3><p>为什么表结构的分区与分区字段里去重值数量不一样？</p>]]></content>
      
      
      <categories>
          
          <category> doris </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实践操作</title>
      <link href="2021/01/09/doris/%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/"/>
      <url>2021/01/09/doris/%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-复制表"><a href="#1-复制表" class="headerlink" title="1. 复制表"></a>1. 复制表</h2><h3 id="1-1-复制表结构"><a href="#1-1-复制表结构" class="headerlink" title="1.1 复制表结构"></a>1.1 复制表结构</h3><h3 id="1-2-复制表数据"><a href="#1-2-复制表数据" class="headerlink" title="1.2 复制表数据"></a>1.2 复制表数据</h3>]]></content>
      
      
      <categories>
          
          <category> doris </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程问题</title>
      <link href="2021/01/06/java/problem/%E5%B7%A5%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
      <url>2021/01/06/java/problem/%E5%B7%A5%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jbgtwang/article/details/90443069?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">intellij idea载入java工程报程序包不存在问题</a></p><p>mvn idea:module 命令执行重新生成iml文件</p>]]></content>
      
      
      <categories>
          
          <category> java-problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>待整理</title>
      <link href="2021/01/06/olap/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/06/olap/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/40700596">数据挖掘…》 Chapter 4. 数据仓库与OLAP</a></p><p><a href="https://blog.csdn.net/hellojoy/category_10715698.html">数仓理论</a></p><h3 id="数据分层"><a href="#数据分层" class="headerlink" title="数据分层"></a>数据分层</h3><p><a href="https://km.sankuai.com/page/37119772">模型层次</a></p>]]></content>
      
      
      <categories>
          
          <category> olap </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据仓库</title>
      <link href="2021/01/06/olap/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
      <url>2021/01/06/olap/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> olap </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java枚举</title>
      <link href="2021/01/06/java/base/%E6%9E%9A%E4%B8%BE/"/>
      <url>2021/01/06/java/base/%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/m0_43401436/article/details/104130410">Java枚举类——valueOf()的用法</a></p>]]></content>
      
      
      <categories>
          
          <category> java-基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java运算符</title>
      <link href="2021/01/06/java/base/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/01/06/java/base/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_41050155/article/details/79725555">java位运算符详解</a></p>]]></content>
      
      
      <categories>
          
          <category> java-基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git操作</title>
      <link href="2021/01/06/tools/git/git%E6%93%8D%E4%BD%9C/"/>
      <url>2021/01/06/tools/git/git%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012830148/article/details/77497240">如何使用git比较两次commit之间的差异文件</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff hash1 hash2</span><br><span class="line">hash2是后提交的commit</span><br><span class="line">即hash1是被对比commit，diff结果是hash2在hash1上的改动</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="2021/01/06/arithmetic/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>2021/01/06/arithmetic/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/liyulong1982/p/6013002.html">布隆过滤器(Bloom Filter)详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>报错汇总</title>
      <link href="2021/01/06/doris/%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/"/>
      <url>2021/01/06/doris/%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-Can-not-alter-table-when-there-are-temp-partitions-in-table"><a href="#1-1-Can-not-alter-table-when-there-are-temp-partitions-in-table" class="headerlink" title="1.1 Can not alter table when there are temp partitions in table"></a>1.1 Can not alter table when there are temp partitions in table</h3><p>原因是之前进行过改表操作，还没有完成</p><p>可以通过<code>SHOW ALTER TABLE COLUMN;</code> 查看改表的进度</p><h3 id="1-2-timeout"><a href="#1-2-timeout" class="headerlink" title="1.2 timeout"></a>1.2 timeout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set query_timeout&#x3D;60;</span><br></pre></td></tr></table></figure><h3 id="1-3-Memory-exceed-limit-Hash-join-doris"><a href="#1-3-Memory-exceed-limit-Hash-join-doris" class="headerlink" title="1.3 Memory exceed limit. Hash join doris"></a>1.3 Memory exceed limit. Hash join doris</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET exec_mem_limit &#x3D; 8589934592;</span><br></pre></td></tr></table></figure><h3 id="1-4-Unexpected-exception-No-value-present"><a href="#1-4-Unexpected-exception-No-value-present" class="headerlink" title="1.4 Unexpected exception: No value present"></a>1.4 Unexpected exception: No value present</h3><h3 id="1-5-there-is-no-scanNode-Backend-doris"><a href="#1-5-there-is-no-scanNode-Backend-doris" class="headerlink" title="1.5 there is no scanNode Backend doris"></a>1.5 there is no scanNode Backend doris</h3><h3 id="1-6-bitmap-union-int-cause-‘be’-node-hang"><a href="#1-6-bitmap-union-int-cause-‘be’-node-hang" class="headerlink" title="1.6 bitmap_union_int cause ‘be’ node hang"></a>1.6 bitmap_union_int cause ‘be’ node hang</h3><h3 id="1-7-Failed-to-get-scan-range-no-queryable-replica-found-in-tablet"><a href="#1-7-Failed-to-get-scan-range-no-queryable-replica-found-in-tablet" class="headerlink" title="1.7 Failed to get scan range, no queryable replica found in tablet"></a>1.7 Failed to get scan range, no queryable replica found in tablet</h3><h3 id="2-1-分区报错"><a href="#2-1-分区报错" class="headerlink" title="2.1 分区报错"></a>2.1 分区报错</h3><p>注意：</p><ol><li>已经划分好的区间分区，不能在被切分，即分区（1，3），不能被拆分为(1,2)和(2,3)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alter table topic_smart_user_group_detail_2 add partition IF NOT EXISTS p2 values less than (3);</span><br><span class="line">insert into topic_smart_user_group_detail_2 VALUES (2, 1, &#39;1004230612&#39;),(2, 1, &#39;1047296444&#39;),(2, 1, &#39;1053250666&#39;);</span><br><span class="line"></span><br><span class="line">org.jkiss.dbeaver.model.sql.DBSQLException: SQL 错误 [1064] [42000]: errCode &#x3D; 2, detailMessage &#x3D; Syntax error in line 1:</span><br><span class="line">...ISTS p2 values less than (3)</span><br><span class="line">                             ^</span><br><span class="line">Encountered: INTEGER LITERAL</span><br><span class="line">Expected: COMMA</span><br><span class="line"></span><br><span class="line">less than () 括号中必须是字符串</span><br><span class="line"></span><br><span class="line">alter table topic_smart_user_group_detail_2 add partition IF NOT EXISTS p2 values less than (&quot;3&quot;);</span><br><span class="line">insert into topic_smart_user_group_detail_2 VALUES (5, 1, &#39;1004230612&#39;),(5, 1, &#39;1047296444&#39;),(5, 1, &#39;1053250666&#39;);</span><br><span class="line"></span><br><span class="line">all partitions have no load data</span><br><span class="line">表示没有创建需要的分区</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://km.sankuai.com/page/410003438">Doris建表 FAQ</a></li><li><a href="https://km.sankuai.com/page/163452248#id-4.2%E4%B8%BA%E4%BB%80%E4%B9%88CreateTablet%E4%BC%9A%E8%B6%85%E6%97%B6%EF%BC%9F">Hive To Doris 数据同步事故</a></li><li><a href="https://km.sankuai.com/page/311203973">Doris使用FAQ(持续更新中)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> doris </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/06/solution/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/06/solution/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="实时溯源"><a href="#实时溯源" class="headerlink" title="实时溯源"></a>实时溯源</h3><p><a href="https://km.sankuai.com/page/315932570">一种外卖场景下用户行为实时溯源的方法</a></p><h3 id="flink-hbase"><a href="#flink-hbase" class="headerlink" title="flink+hbase"></a>flink+hbase</h3><p><a href="https://blog.csdn.net/god_zhi_big/article/details/78231134?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">从kafka到flink到hbase的心酸路程示例（希望有用）</a></p><p><a href="https://blog.csdn.net/weixin_34205826/article/details/89549380?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">Flink+HBase场景化解决方案</a></p><p><a href="https://blog.csdn.net/javajxz008/article/details/83269108?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">Flink读写系列之-读HBase并写入HBase</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>待整理</title>
      <link href="2021/01/06/hbase/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/06/hbase/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><a href="https://cloud.tencent.com/developer/article/1702319">初识 HBase</a></p><p><a href="https://cloud.tencent.com/developer/article/1722656?from=information.detail.hbase%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0">Hbase入门详解</a></p><p><a href="https://cloud.tencent.com/developer/article/1424162?from=information.detail.hbase%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0">一篇文章入门Hbase</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://blog.csdn.net/weixin_38023225/article/details/102570639?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-6&spm=1001.2101.3001.4242">HBase原理（读写流程）</a></p><p><a href="https://blog.csdn.net/ASN_forever/article/details/104763712/">hbase为什么能够实现实时读写</a></p><p><a href="https://www.cnblogs.com/zmanzi/p/10864091.html">hbase知识点及实时读写原理</a></p><p><a href="https://cloud.tencent.com/developer/article/1358126?from=information.detail.hbase%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0">Hbase原理详解</a></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><a href="https://blog.csdn.net/zx8167107/article/details/78753634">hbase读写性能测试调优</a></p><p><a href="https://blog.csdn.net/lisulong1/article/details/53617234?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">优化hbase的查询提升读写速率优化案例及性能提升的几种方法</a></p><p><a href="https://blog.csdn.net/codemosi/article/details/48681679">实时系统HBase读写优化–大量写入无障碍</a></p><p><a href="https://www.cnblogs.com/cxhfuujust/p/7771123.html">hbase大规模数据写入的优化历程</a></p><p><a href="https://cloud.tencent.com/developer/article/1337350?from=information.detail.hbase%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0">HBase篇–HBase常用优化</a></p><p><a href="https://blog.csdn.net/su20145104009/article/details/80614425">hbase实时优化思路</a></p><h2 id="深入学习"><a href="#深入学习" class="headerlink" title="深入学习"></a>深入学习</h2><p><a href="https://cloud.tencent.com/developer/article/1005990?from=information.detail.hbase%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0">HBase 学习分享</a></p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p><a href="https://cloud.tencent.com/developer/article/1674199?from=information.detail.hbase%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0">Hbase 基础面试题</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据概念</title>
      <link href="2021/01/06/concept/%E6%95%B0%E6%8D%AE%E6%A6%82%E5%BF%B5/"/>
      <url>2021/01/06/concept/%E6%95%B0%E6%8D%AE%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6844903957693726727">漫画：什么是中台？</a></p>]]></content>
      
      
      <categories>
          
          <category> 概念 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据倾斜问题</title>
      <link href="2021/01/06/flink/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C/"/>
      <url>2021/01/06/flink/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/cbd7046e74aa">用两阶段聚合法解决Flink keyBy()算子倾斜</a></p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的写api接口</title>
      <link href="2021/01/06/java/rule/%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99Api%E6%8E%A5%E5%8F%A3/"/>
      <url>2021/01/06/java/rule/%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99Api%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/fa75acba5b07">看看人家那后端API接口写得，那叫一个优雅！</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java-规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待整理</title>
      <link href="2021/01/06/deep/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/06/deep/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h4 id="bitMap"><a href="#bitMap" class="headerlink" title="bitMap"></a>bitMap</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1NTMyOTI4Mw==&mid=2247492204&idx=1&sn=269493abe2acc61d06321e6aa5c6dbe5&chksm=fbd75000cca0d91668829252016209ff50a69b810bc5f98635f43324d8eb3ba4cec7e8105673&scene=21#wechat_redirect">快手 HBase 在千亿级用户特征数据分析中的应用与实践</a></p><p>基于bitmap开发的bitbase，与成都开发的bitcube类似</p><p><a href="https://blog.csdn.net/u013516966/article/details/103917880">不得不掌握的三种BitMap</a></p><ol><li>BitMap</li><li>RoaringBitmap</li><li>Roaring64NavigableMap</li></ol><p><a href="https://www.jianshu.com/p/818ac4e90daf">高效压缩位图RoaringBitmap的原理与应用</a></p><p><a href="https://juejin.cn/post/6844903769201704973">漫画：什么是Bitmap算法？</a></p><p><a href="https://blog.csdn.net/lucky52529/article/details/90172264">[数据结构]——位图原理及实现</a></p><p><a href="https://km.sankuai.com/page/454073303">概要设计-全局字典</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术探索 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/06/sql/hive/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/06/sql/hive/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/helloxiaozhe/article/details/80363893">Hive下查看表占用空间大小的方法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>待整理</title>
      <link href="2021/01/06/spark/%E5%BE%85%E6%95%B4%E7%90%86/"/>
      <url>2021/01/06/spark/%E5%BE%85%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="sparkUI"><a href="#sparkUI" class="headerlink" title="sparkUI"></a>sparkUI</h2><p><a href="https://km.sankuai.com/page/237242009">Spark UI (1) - Jobs页面</a></p><p><a href="https://cloud.tencent.com/developer/article/1582307">Spark Web UI 监控详解</a></p><h2 id="sparkSQL"><a href="#sparkSQL" class="headerlink" title="sparkSQL"></a>sparkSQL</h2><p><a href="https://zhuanlan.zhihu.com/p/78804934">spark sql多维分析优化——细节是魔鬼</a></p><p><a href="https://zhuanlan.zhihu.com/p/78266517">从一个sql引发的hive谓词下推的全面复盘及源码分析(上)</a></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><a href="https://www.codercto.com/a/66295.html">spark执行map-join优化</a></p><p><a href="https://www.cnblogs.com/wbh1000/p/9827344.html">使用Spark进行搜狗日志分析实例——map join的使用</a></p><p><a href="https://zhuanlan.zhihu.com/p/77614511">记录一次spark sql的优化过程</a></p><p><a href="https://zhuanlan.zhihu.com/p/79737848">spark sql多维分析优化——提高读取文件的并行度</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><a href="https://blog.csdn.net/anbang713/article/details/82858745">Spark项目实战-数据倾斜解决方案之将reduce join转换为map join</a></p><h2 id="常见错误汇总"><a href="#常见错误汇总" class="headerlink" title="常见错误汇总"></a>常见错误汇总</h2><p><a href="https://www.cnblogs.com/Gxiaobai/p/11166986.html">Container xxx is running beyond physical memory limits</a></p>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis高级功能</title>
      <link href="2021/01/06/redis/%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/"/>
      <url>2021/01/06/redis/%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h5 id><a href="#" class="headerlink" title></a></h5><p><a href="https://www.runoob.com/redis/redis-hyperloglog.html">Redis HyperLogLog</a></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>参考资料</title>
      <link href="2021/01/06/flink/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>2021/01/06/flink/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/d2dbc089b0bd">Flink 全网最全资源（视频、博客、PPT、入门、实战、源码解析、问答等持续更新）</a></p><p><a href="https://www.cnblogs.com/cjblogs/p/12973063.html">Flink 流式聚合性能调优指南</a></p><p><a href="https://zhuanlan.zhihu.com/p/26983736">【资料合集】Apache Flink 精选PDF下载</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://tech.meituan.com/2017/11/17/flink-benchmark.html">流计算框架 Flink 与 Storm 的性能对比</a></p><h2 id="聚合处理"><a href="#聚合处理" class="headerlink" title="聚合处理"></a>聚合处理</h2><ol><li></li><li><a href="https://zhuanlan.zhihu.com/p/131576782">Flink 消息聚合处理方案</a></li></ol><h2 id="实时数仓"><a href="#实时数仓" class="headerlink" title="实时数仓"></a>实时数仓</h2><p><a href="https://tech.meituan.com/2018/10/18/meishi-data-flink.html">美团点评基于 Flink 的实时数仓建设实践</a></p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/06/framework/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>2021/01/06/framework/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/33c6a7ed126f">可视化架构设计——C4介绍</a></p><p><a href="https://www.jianshu.com/p/0e4cd54094f9">微信支付的架构到底有多牛？</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>职业规划</title>
      <link href="2021/01/06/career/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
      <url>2021/01/06/career/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h5 id="程序员与架构师之间的差距很大吗？"><a href="#程序员与架构师之间的差距很大吗？" class="headerlink" title="程序员与架构师之间的差距很大吗？"></a><a href="https://www.jianshu.com/p/c6f8fd266bb6">程序员与架构师之间的差距很大吗？</a></h5><h5 id="中年IT男的转型思考：做个越老越吃香的事业吧！"><a href="#中年IT男的转型思考：做个越老越吃香的事业吧！" class="headerlink" title="中年IT男的转型思考：做个越老越吃香的事业吧！"></a><a href="https://www.jianshu.com/p/3aba78b9105e">中年IT男的转型思考：做个越老越吃香的事业吧！</a></h5>]]></content>
      
      
      <categories>
          
          <category> 职业 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊语法</title>
      <link href="2021/01/06/sql/mysql/%E7%89%B9%E6%AE%8A%E8%AF%AD%E6%B3%95/"/>
      <url>2021/01/06/sql/mysql/%E7%89%B9%E6%AE%8A%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="MYSQL中的COLLATE是什么？"><a href="#MYSQL中的COLLATE是什么？" class="headerlink" title="MYSQL中的COLLATE是什么？"></a><a href="https://cloud.tencent.com/developer/article/1366841">MYSQL中的COLLATE是什么？</a></h5><p>指定排序规则</p>]]></content>
      
      
      <categories>
          
          <category> sql-mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven命令</title>
      <link href="2021/01/06/tools/maven/maven%E5%91%BD%E4%BB%A4/"/>
      <url>2021/01/06/tools/maven/maven%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="查看依赖jar包"><a href="#查看依赖jar包" class="headerlink" title="查看依赖jar包"></a>查看依赖jar包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree -Dverbose</span><br><span class="line"></span><br><span class="line">mvn dependency:tree -Dverbose -Dincludes=org.apache.logging.log4j:log4j-api </span><br></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean -U package -pl analysis-tool -am -P dev -Dmaven.source.skip=true -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p>要注意的是-P 对大小写敏感</p><h4 id="重新生成iml文件"><a href="#重新生成iml文件" class="headerlink" title="重新生成iml文件"></a>重新生成iml文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn idea:module</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-e 详细错误描述</span><br><span class="line">-X</span><br></pre></td></tr></table></figure><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h4 id="the-output-path-is-not-specified-for-module-‘xxx’"><a href="#the-output-path-is-not-specified-for-module-‘xxx’" class="headerlink" title="the output path is not specified for module ‘xxx’"></a>the output path is not specified for module ‘xxx’</h4><p>Specify the output path in the Project Structure dalog</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技巧</title>
      <link href="2021/01/06/java/debug/%E6%8A%80%E5%B7%A7/"/>
      <url>2021/01/06/java/debug/%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/slankka/p/13590451.html">SpringBoot启动后直接退出Process finished with exit code 1</a></p><p>一般是有错误，但输出并不是console，可以修改log的输出，也可以用try catch查看异常</p>]]></content>
      
      
      <categories>
          
          <category> java-debug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring注解</title>
      <link href="2021/01/06/java/spring/%E6%B3%A8%E8%A7%A3/"/>
      <url>2021/01/06/java/spring/%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="自动化配置的问题"><a href="#自动化配置的问题" class="headerlink" title="自动化配置的问题"></a>自动化配置的问题</h2><h5 id="需要排除的配置"><a href="#需要排除的配置" class="headerlink" title="需要排除的配置"></a>需要排除的配置</h5><p>[<a href="https://www.cnblogs.com/javastack/p/12016212.html">Spring Boot 排除自动配置的 4 种方法，关键时刻很有用！</a>]</p><ol><li>@SpringBootApplication</li><li>@EnableAutoConfiguration</li><li>@SpringCloudApplication</li><li>spring.autoconfigure.exclude</li></ol><p><a href="https://blog.csdn.net/dyc87112/article/details/73739535">Spring Boot自动化配置的利弊及解决之道</a></p><h6 id="排除的类总结"><a href="#排除的类总结" class="headerlink" title="排除的类总结"></a>排除的类总结</h6><ol><li><a href="https://github.com/SpringBootApplication">@SpringBootApplication</a>(exclude = DruidDataSourceAutoConfigure.class)</li><li></li></ol><h2 id="注解用法"><a href="#注解用法" class="headerlink" title="注解用法"></a>注解用法</h2><p><a href="https://blog.csdn.net/sqlgao22/article/details/100095433">@RequestBody和@RequestParam注解使用</a></p><h3 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h3><ol><li>可以指定线程池</li></ol><h4 id="不生效原因："><a href="#不生效原因：" class="headerlink" title="不生效原因："></a>不生效原因：</h4><ol><li>需要保证调用函数与注解修饰的函数在不同类中，因为不会走代理类。<a href="https://blog.csdn.net/weixin_37760377/article/details/103627676">详解</a> <a href="https://blog.csdn.net/YoungLee16/article/details/88398045">详解2</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> java-spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis技巧</title>
      <link href="2021/01/06/java/mybatis/%E6%8A%80%E5%B7%A7/"/>
      <url>2021/01/06/java/mybatis/%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h5 id="Mybatis中判断集合的-size-不为空"><a href="#Mybatis中判断集合的-size-不为空" class="headerlink" title="Mybatis中判断集合的 size 不为空"></a>Mybatis中判断集合的 size 不为空</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;null != staffCodeList and staffCodeList.size &gt; 0&quot;</span>&gt;</span></span><br><span class="line">and gui.USER_CODE not in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;staffCodeList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;staffCode&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>  <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;staffCode&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="判断参数为空"><a href="#判断参数为空" class="headerlink" title="判断参数为空"></a>判断参数为空</h5><p>1.判断Double类型：<if test="probability != null">probability = #{probability},</if>，在实体类中probability字段是Double类型；</p><p>2.判断Integer类型：<if test="faceValue != null">face_value = #{faceValue}, </if>，在实体类中faceValue字段是Integer类型；</p><p>3.判断String类型：<if test="couponName != null and couponName != ''">coupon_name = #{couponName}, </if>，在实体类中couponName是String类型；</p><p>4.判断Date类型：<if test="beginTime != null">begin_time = #{beginTime}, </if>，在实体类中beginTime字段是Date类型；</p><p>因为String类型是符合的，但是如果是Integer类型的话，如果变量的值是0,即 faceValue = 0, mybatis在进行 faceValue != ‘’ 的时候会认为 faceValue 的值是空字符串, 即 faceValue == ‘’ 为true；</p><p>同理，Double，Date也是如此。所以如果是Integer类型，Double类型，Date类型只需要判断 != null 即可。如果String类型需要判断不等于0，则需要写name != ‘0’.toString()，否则会报错。</p><h5 id="mybatis-中-foreach-collection的三种用法"><a href="#mybatis-中-foreach-collection的三种用法" class="headerlink" title="mybatis 中 foreach collection的三种用法"></a>mybatis 中 foreach collection的三种用法</h5><p><a href="https://blog.csdn.net/weixin_30684743/article/details/96912611?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">mybatis 中 foreach collection的三种用法</a></p><h5 id="Mybatis使用IN语句查询"><a href="#Mybatis使用IN语句查询" class="headerlink" title="Mybatis使用IN语句查询"></a>Mybatis使用IN语句查询</h5><p><a href="https://blog.csdn.net/u011781521/article/details/79669180">Mybatis使用IN语句查询</a></p><h3 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h3><p><a href="https://www.cnblogs.com/tygtyg/p/10448515.html">mybatis插入数据后返回对象id</a></p><p><a href="https://www.cnblogs.com/ws563573095/p/10301809.html">mybatis插入返回id或对象</a></p>]]></content>
      
      
      <categories>
          
          <category> java-mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring数据源配置</title>
      <link href="2021/01/06/java/spring/%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
      <url>2021/01/06/java/spring/%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.demodashi.com/demo/14622.html">基于springboot的多数据源配置</a></p><p>使用<code>dynamic-datasource-spring-boot-starter</code>，并用@DS指定数据源</p><p><a href="https://blog.csdn.net/superyu1992/article/details/80336928">SpringBoot 配合 druid作为数据库连接池 时需要注意的一点</a></p><p><a href="https://blog.csdn.net/w57685321/article/details/106823660">使用dynamic-datasource-spring-boot-starter做多数据源及源码分析</a></p><p>需要配置master作为默认数据源，否则会报，<code>请检查primary默认数据库设置</code>。</p><p><a href="https://my.oschina.net/TyTracy/blog/1926571">Spring多数据源、动态数据源源码解析</a></p>]]></content>
      
      
      <categories>
          
          <category> java-spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>参考资料</title>
      <link href="2021/01/06/java/mybatis/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>2021/01/06/java/mybatis/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baomidou.com/guide/">官方文档</a></p><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Parameters">官方文档二</a></p><p><a href="https://baomidou.com/guide/dynamic-datasource.html">多数据源</a></p>]]></content>
      
      
      <categories>
          
          <category> java-mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis常用注解</title>
      <link href="2021/01/06/java/mybatis/mybatis%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>2021/01/06/java/mybatis/mybatis%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://km.sankuai.com/page/625212960">mybatis注解</a></p><p><img src="/2021/01/06/java/mybatis/mybatis%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/../../picture/java-mybatis/spring%E4%B8%ADmybatis%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png"></p><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h3><p>   mybatis 最初配置信息是基于 XML ,映射语句(SQL)也是定义在 XML 中的。而到了 MyBatis 3提供了新的基于注解的配置。mybatis提供的注解有很多，大致可以分为以下几类： </p><ul><li><p><strong>增删改查：</strong>@Insert、@Update、@Delete、@Select、@MapKey、@Options、@SelelctKey、@Param、@InsertProvider、@UpdateProvider、@DeleteProvider、@SelectProvider </p></li><li><p><strong>结果集映射：</strong>@Results、@Result、@ResultMap、@ResultType、@ConstructorArgs、@Arg、@One、@Many、@TypeDiscriminator、@Case </p></li><li><p><strong>缓存：</strong>@CacheNamespace、@Property、@CacheNamespaceRef、@Flush </p><p> 绝大部分注解，在xml映射文件中都有元素与之对应，但是不是所有。此外在mybatis-spring中提供了@Mapper注解和@MapperScan注解，用于和spring进行整合。 </p></li></ul><h3 id="2-增删改查相关注解"><a href="#2-增删改查相关注解" class="headerlink" title="2 增删改查相关注解"></a>2 增删改查相关注解</h3><table><thead><tr><th><strong>注解</strong></th><th><strong>使用对象</strong></th><th><strong>相对应的 XML</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>@Insert @Update @Delete @Select</td><td>方法</td><td><insert> <update> <delete> <select></select></delete></update></insert></td><td>这四个注解分别代表将会被执行的 SQL 语句。它们用字符串数组（或单个字符串）作为参数。如果传递的是字符串数组，字符串之间先会被填充一个空格再连接成单个完整的字符串。这有效避免了以 Java 代码构建 SQL 语句时的“丢失空格”的问题。然而，你也可以提前手动连接好字符串。属性有：value，填入的值是用来组成单个 SQL 语句的字符串数组。</td></tr><tr><td>@Options</td><td>方法</td><td>映射语句的属性</td><td>这个注解提供访问大范围的交换和配置选项的入口，它们通常在映射语句上作为属性出现。Options 注解提供了通俗易懂的方式来访问它们，而不是让每条语句注解变复杂。属性有：useCache=true, flushCache=FlushCachePolicy.DEFAULT, resultSetType=FORWARD_ONLY, statementType=PREPARED, fetchSize=-1, timeout=-1, useGeneratedKeys=false, keyProperty=”id”, keyColumn=””, resultSets=””。值得一提的是， Java 注解无法指定 null 值。因此，一旦你使用了 Options 注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的预期以外的行为。     注意： keyColumn 属性只在某些数据库中有效（如 Oracle、PostgreSQL等）。请在插入语句一节查看更多关于 keyColumn 和 keyProperty 两者的有效值详情。</td></tr><tr><td>@MapKey</td><td>方法</td><td></td><td>这是一个用在返回值为 Map 的方法上的注解。它能够将存放对象的 List 转化为 key 值为对象的某一属性的 Map。属性有： value，填入的是对象的属性名，作为 Map 的 key 值。</td></tr><tr><td>@SelectKey</td><td>方法</td><td><selectKey></selectKey></td><td>这个注解的功能与 <selectKey> 标签完全一致，用在已经被 @Insert 或 @InsertProvider 或 @Update 或 @UpdateProvider 注解了的方法上。若在未被上述四个注解的方法上作 @SelectKey 注解则视为无效。如果你指定了 @SelectKey 注解，那么 MyBatis 就会忽略掉由 @Options 注解所设置的生成主键或设置（configuration）属性。属性有：statement 填入将会被执行的 SQL 字符串数组，keyProperty 填入将会被更新的参数对象的属性的值，before 填入 true 或 false 以指明 SQL 语句应被在插入语句的之前还是之后执行。resultType 填入 keyProperty 的 Java 类型和用 Statement、 PreparedStatement 和 CallableStatement 中的 STATEMENT、 PREPARED 或 CALLABLE 中任一值填入 statementType。默认值是 PREPARED。</selectKey></td></tr><tr><td>@Param</td><td>参数</td><td>N/A</td><td>如果你的映射方法的形参有多个，这个注解使用在映射方法的参数上就能为它们取自定义名字。若不给出自定义名字，多参数（不包括 RowBounds 参数）则先以 “param” 作前缀，再加上它们的参数位置作为参数别名。例如 #{param1}, #{param2}，这个是默认值。如果注解是 @Param(“person”)，那么参数就会被命名为 #{person}。</td></tr><tr><td>@InsertProvider @UpdateProvider @DeleteProvider @SelectProvider</td><td>方法</td><td><insert> <update> <delete> <select></select></delete></update></insert></td><td>允许构建动态 SQL。这些备选的 SQL 注解允许你指定类名和返回在运行时执行的 SQL 语句的方法。（自从MyBatis 3.4.6开始，你可以用 CharSequence 代替 String 来返回类型返回值了。）当执行映射语句的时候，MyBatis 会实例化类并执行方法，类和方法就是填入了注解的值。你可以把已经传递给映射方法了的对象作为参数，”Mapper interface type” 和 “Mapper method” 会经过 ProviderContext （仅在MyBatis 3.4.5及以上支持）作为参数值。（MyBatis 3.4及以上的版本，支持多参数传入）属性有： type, method。type 属性需填入类。method 需填入该类定义了的方法名。注意 接下来的小节将会讨论类，能帮助你更轻松地构建动态 SQL。</td></tr></tbody></table><p>映射器接口示例，假设有以下UserMapper接口： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Insert(&quot;INSERT INTO user(id,name) VALUES (#&#123;id&#125;,#&#123;name&#125;)”)</span></span><br><span class="line">   <span class="meta">@Options(useGeneratedKeys = true, keyColumn = &quot;id&quot;, keyProperty = &quot;id&quot;)</span> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Update(&quot; UPDATE user SET name=#&#123;name&#125; WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Delete(“ DELETE FROM user WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Select(&quot;SELECT id,name FROM user WHERE id= #&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Select(&quot;SELECT id,name FROM user&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Select(&quot;SELECT id,name FROM user&quot;)</span></span><br><span class="line">   <span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;Integer,User&gt; <span class="title">selectMap</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Select(&#123; &quot;&lt;script&gt;&quot;,</span></span><br><span class="line"><span class="meta">      &quot;SELECT id,name &quot; + &quot;FROM user &quot; + &quot;WHERE id IN &quot;</span></span><br><span class="line"><span class="meta">            + &quot;&lt;foreach item=&#x27;id&#x27; index=&#x27;index&#x27; collection=‘array&#x27; open=&#x27;(&#x27; separator=&#x27;,&#x27; close=&#x27;)&#x27;&gt; &quot; </span></span><br><span class="line"><span class="meta">                 + &quot;#&#123;id&#125;&quot;</span></span><br><span class="line"><span class="meta">            + &quot;&lt;/foreach&gt; &quot;,</span></span><br><span class="line"><span class="meta">      &quot;&lt;/script&gt;&quot; &#125;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectByIds</span><span class="params">(<span class="keyword">int</span>... ids)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Select(&quot;SELECT id,name FROM user LIMIT #&#123;offset&#125;,#&#123;limit&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectPage</span><span class="params">(<span class="meta">@Param(&quot;offset&quot;)</span> <span class="keyword">int</span> offset, <span class="meta">@Param(&quot;limit&quot;)</span> <span class="keyword">int</span> limit)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><h4 id="2-1-Insert、-Update、-Delete、-Options、-SelectKey注解"><a href="#2-1-Insert、-Update、-Delete、-Options、-SelectKey注解" class="headerlink" title="2.1 @Insert、@Update、@Delete、@Options、@SelectKey注解"></a>2.1 @Insert、@Update、@Delete、@Options、@SelectKey注解</h4><p>   mybatis会根据接口方法上的@Insert、@Update、@Delete注解，分别去调用SqlSession的insert、update、delete方法。这个几个方法返回的都是一个int，表示影响的记录行数。 </p><p>  特别的，在UserMapper接口的insert方法上，除了添加了@Insert注解，还添加了@Options注解。在上面的案例中，@Options注解用于获取自动生成主键，并设置到User实体中。此外，@SelectKey注解也可以用于获取自动生成的主键，使用方式如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO user(id,name) VALUES (#&#123;id&#125;,#&#123;name&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@SelectKey(statement = &quot;SELECT LAST_INSERT_ID()&quot;, keyProperty = &quot;id&quot;, before = false, resultType = Integer.class)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>; </span><br></pre></td></tr></table></figure><h4 id="2-2-Select注解"><a href="#2-2-Select注解" class="headerlink" title="2.2 @Select注解"></a>2.2 @Select注解</h4><p>   在上面的案例中，UserMapper的selectById、selectAll、selectMap、selectByIds、selectPage方法都添加了@Select注解。mybatis会根据方法的返回值类型User、List<User>、Map&lt;Integer,User&gt;判断是调用SqlSession的selectOne、selectList还是selectMap方法。 </User></p><h4 id="2-3-MapKey注解"><a href="#2-3-MapKey注解" class="headerlink" title="2.3 @MapKey注解"></a>2.3 @MapKey注解</h4><p>特别的，对于返回值是Map的情况，UserMapper的selectMap方法上额外添加了一个@MapKey(“id”)注解，表示将User实例的id属性当做Map的key。 </p><h4 id="2-4-动态sql与标签"><a href="#2-4-动态sql与标签" class="headerlink" title="2.4  动态sql与标签"></a>2.4  动态sql与<script>标签</h4><p>  在UserMapper的selectByIds方法中，可以看到@Select注解里填写的SQL前后分别添加了<script>、</script>，这是因为SQL中使用了动态sql标签<foreach>。不管是@Insert、@Update、@Delete、@Select注解，只要SQL里使用了mybatis的动态sql标签(包括：if、choose …when …otherwise、trim 、where、 set、foreach、bind)等，都建议在sql前后分别加上<script>、</script>，否则可能会出现一些参数找不到的情况。 <p></p><h4 id="2-5-Param注解"><a href="#2-5-Param注解" class="headerlink" title="2.5 @Param注解"></a>2.5 @Param注解</h4><p>   @Param注解用于给方法参数起一个名字。以下是笔者总结的使用原则：</p><ul><li><p>在方法只接受一个参数的情况下，可以不使用@Param。</p></li><li><p>在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名。</p><p> 例如上述案例的selectPage方法接受2个参数，所以其两个参数都使用了@Param注解。@Param注解看起来配置最简单，实际上理解确实最复杂，下面进行详细的介绍。</p><p> 前面已经提到，当映射器接口定义的方法被调用时，mybatis内部根据方法上注解：@Insert、@Update、@Delete、@Select来选择调用SqlSession的insert、update、delete、selectXXX方法。以下是SqlSession接口的相关方法定义(部分省略)：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> <span class="keyword">extends</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement)</span></span>;</span><br><span class="line">  &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement)</span></span>;</span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">  &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String statement, String mapKey)</span></span>;</span><br><span class="line">  &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String statement, Object parameter, String mapKey)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   可以看到部分方法接受一个Object类型的parameter参数，另外一些方法则没有此参数。mybatis在执行前，除了会根据方法上注解：@Insert、@Update、@Delete、@Select来选择调用SqlSession的insert、update、delete、selectXXX方法；还会提前对传入映射器接口方法中的参数进行一些处理，然后再调用SqlSession的相应方法。逻辑如下： </p><p>   1、如果映射器接口方法不接受参数，mybatis在执行时会调用相应无parameter参数的方法重载形式。例如，如UserMapper接口的selectAll方法，其不接受参数，返回值类型为List，因此调用SqlSession不接受paramter参数的selectList方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement)</span></span>; </span><br></pre></td></tr></table></figure><p>   2、如果映射器方法只有一个参数，并且这个参数没有使用@Param注解，则直接用这个参数来调用SqlSession相应接受Object类型parameter方法参数的重载形式。例如，如UserMapper接口的selectByIds方法，其接受1个int[]数组类型参数作为查询条件，返回值类型为List<User>，因此调用SqlSession接受paramter参数的selectList方法：</User></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span>; </span><br></pre></td></tr></table></figure><p>   3、如果映射器方法只接受一个参数，但是使用了@Param注解，也会先封装到Map中；活着映射器方法总是接受多个参数，不管有没有使用@Param注解指定参数，总是会先封装到一个Map中。之后，调用SqlSession的相应方法把这个Map当做parameter参数传入。</p><p>   例如：UserMapper接口的selectPage方法， 通过@Param(“offset”)和@Param(“limit”)为2个int参数指定了名字。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT id,name FROM user LIMIT #&#123;offset&#125;,#&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectPage</span><span class="params">(<span class="meta">@Param(&quot;offset&quot;)</span> <span class="keyword">int</span> offset, <span class="meta">@Param(&quot;limit&quot;)</span> <span class="keyword">int</span> limit)</span></span>; </span><br></pre></td></tr></table></figure><p>假设我们传入0和10，那么参数封装后的Map结构如下： </p><p> key     value </p><p>-——————- </p><p> offset    0     //1 </p><p> limit    10    //2 </p><p> param1    0     //3 </p><p> param2    10    //4 </p><p>关于Map中1、2两个key-value，比较好理解，是我们通过@Param注解指定的映射关系。而3、4两个key-value，实际上是参数位置(param1、param2…，下标从1开始)和参数值的映射关系，不管我们有没有使用@Param注解，存在多个参数的情况下，我们总是可以按照位置进行引用。 </p><p>   因此，将UserMapper的selectPage方法定义改成以下形式也是正确的： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用了@Param注解的情况下，依然根据参数位置进行引用(param1，param2…，下标从1开始)</span></span><br><span class="line"><span class="meta">@Select(&quot;SELECT id,name FROM user LIMIT #&#123;param1&#125;,#&#123;param2&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectPage</span><span class="params">(<span class="meta">@Param(&quot;offset&quot;)</span> <span class="keyword">int</span> offset, <span class="meta">@Param(&quot;limit&quot;)</span> <span class="keyword">int</span> limit)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用@Param注解，直接根据参数位置进行引用</span></span><br><span class="line"><span class="meta">@Select(&quot;SELECT id,name FROM user LIMIT #&#123;param1&#125;,#&#123;param2&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectPage</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> limit)</span></span>; </span><br></pre></td></tr></table></figure><p>   显然，根据参数位置进行引用不太直观，因此建议在存在多个参数的情况，总是通过@Param注解显式的指定参数名。 </p><h4 id="2-6-InsertProvider、-UpdateProvider、-DeleteProvider、-SelectProvider注解"><a href="#2-6-InsertProvider、-UpdateProvider、-DeleteProvider、-SelectProvider注解" class="headerlink" title="2.6  @InsertProvider、@UpdateProvider、@DeleteProvider、@SelectProvider注解"></a>2.6  @InsertProvider、@UpdateProvider、@DeleteProvider、@SelectProvider注解</h4><p>这几个注解主要用于动态sql构建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserBuilderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SelectProvider(type = UserSqlBuilder.class, method = &quot;buildSelectByIdSql&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@InsertProvider(type = UserSqlBuilder.class, method = &quot;buildInsertSql&quot;)</span></span><br><span class="line">   <span class="meta">@Options(useGeneratedKeys = true, keyColumn = &quot;id&quot;, keyProperty = &quot;id&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@UpdateProvider(type = UserSqlBuilder.class, method = &quot;buildUpdateSql&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@DeleteProvider(type = UserSqlBuilder.class, method = &quot;buildDeleteSql&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建议将sql builder以映射器接口内部类的形式进行定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSqlBuilder</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildSelectByIdSql</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">               SELECT(<span class="string">&quot;id, name&quot;</span>);</span><br><span class="line">               FROM(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">               WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;.toString();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildInsertSql</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">               INSERT_INTO(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">               VALUES(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;#&#123;name&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;.toString();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildUpdateSql</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">               UPDATE(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">               SET(<span class="string">&quot;name=#&#123;name&#125;&quot;</span>);</span><br><span class="line">               WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;.toString();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildDeleteSql</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">               DELETE_FROM(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">                    WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;.toString();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-结果集映射相关注解"><a href="#3-结果集映射相关注解" class="headerlink" title="3 结果集映射相关注解"></a>3 结果集映射相关注解</h3><table><thead><tr><th><strong>注解</strong></th><th><strong>使用对象</strong></th><th><strong>相对应的 XML</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>@Results</td><td>方法</td><td><resultMap></resultMap></td><td>结果映射的列表，包含了一个特别结果列如何被映射到属性或字段的详情。属性有：value, id。value 属性是 Result 注解的数组。这个 id 的属性是结果映射的名称。</td></tr><tr><td>@Result</td><td>方法</td><td><result> <id></id></result></td><td>在列和属性或字段之间的单独结果映射。属性有：id, column, javaType, jdbcType, typeHandler, one, many。id 属性是一个布尔值，来标识应该被用于比较（和在 XML 映射中的<id>相似）的属性。one 属性是单独的联系，和 <association> 相似，而 many 属性是对集合而言的，和<collection>相似。它们这样命名是为了避免名称冲突。</collection></association></id></td></tr><tr><td>@ResultMap</td><td>方法</td><td>N/A</td><td>这个注解给 @Select 或者 @SelectProvider 提供在 XML 映射中的 <resultMap> 的id。这使得注解的 select 可以复用那些定义在 XML 中的 ResultMap。如果同一 select 注解中还存在 @Results 或者 @ConstructorArgs，那么这两个注解将被此注解覆盖。</resultMap></td></tr><tr><td>@ResultType</td><td>方法</td><td>N/A</td><td>此注解在使用了结果处理器的情况下使用。在这种情况下，返回类型为 void，所以 Mybatis 必须有一种方式决定对象的类型，用于构造每行数据。如果有 XML 的结果映射，请使用 @ResultMap 注解。如果结果类型在 XML 的 <select> 节点中指定了，就不需要其他的注解了。其他情况下则使用此注解。比如，如果 @Select 注解在一个将使用结果处理器的方法上，那么返回类型必须是 void 并且这个注解（或者@ResultMap）必选。这个注解仅在方法返回类型是 void 的情况下生效。</select></td></tr><tr><td>@ConstructorArgs</td><td>方法</td><td><constructor></constructor></td><td>收集一组结果传递给一个结果对象的构造方法。属性有：value，它是形式参数数组。</td></tr><tr><td>@Arg</td><td>N/A</td><td><arg> <idArg></idArg></arg></td><td>单参数构造方法，是 ConstructorArgs 集合的一部分。属性有：id, column, javaType, jdbcType, typeHandler, select和 resultMap。id 属性是布尔值，来标识用于比较的属性，和<idArg> XML 元素相似。</idArg></td></tr><tr><td>@One</td><td>N/A</td><td><association></association></td><td>复杂类型的单独属性值映射。属性有：select，已映射语句（也就是映射器方法）的全限定名，它可以加载合适类型的实例。fetchType会覆盖全局的配置参数 lazyLoadingEnabled。<strong>注意</strong> 联合映射在注解 API中是不支持的。这是因为 Java 注解的限制,不允许循环引用。</td></tr><tr><td>@Many</td><td>N/A</td><td><collection></collection></td><td>映射到复杂类型的集合属性。属性有：select，已映射语句（也就是映射器方法）的全限定名，它可以加载合适类型的实例的集合，fetchType 会覆盖全局的配置参数 lazyLoadingEnabled。<strong>注意</strong> 联合映射在注解 API中是不支持的。这是因为 Java 注解的限制，不允许循环引用</td></tr><tr><td>@TypeDiscriminator</td><td>方法</td><td><discriminator></discriminator></td><td>一组实例值被用来决定结果映射的表现。属性有：column, javaType, jdbcType, typeHandler 和 cases。cases 属性是实例数组。</td></tr><tr><td>@Case</td><td>N/A</td><td><case></case></td><td>单独实例的值和它对应的映射。属性有：value, type, results。results 属性是结果数组，因此这个注解和实际的 ResultMap 很相似，由下面的 Results 注解指定。</td></tr></tbody></table><h4 id="3-1-ConstructorArgs、-Arg注解"><a href="#3-1-ConstructorArgs、-Arg注解" class="headerlink" title="3.1 @ConstructorArgs、@Arg注解"></a>3.1 @ConstructorArgs、@Arg注解</h4><p>  如果实体类没有无参的构造方法，那么我们就必须通过@ConstructorArgs与@Arg注解来提供实体类的构造方法参数信息。例如上述UserMapper的selectById方法，其返回一个User对象。假设User对象只有以下构造方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span> </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.id = id; </span><br><span class="line"><span class="keyword">this</span>.name = name; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  那么需要在selectById方法上，添加@ConstructorArgs注解，提供构造方法信息，如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT id,name FROM user where id= #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ConstructorArgs(&#123;</span></span><br><span class="line"><span class="meta">@Arg(column = &quot;id&quot;,javaType = Integer.class,id = true), </span></span><br><span class="line"><span class="meta">@Arg(column = &quot;name&quot;,javaType = String.class)&#125;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>; </span><br></pre></td></tr></table></figure><p>  注意，通常情况下，我们都建议为实体类提供无参的构造方法的，这是最佳实践的总结，因此@ConstructorArgs注解和@Arg注解基本使用不到。 </p><h4 id="3-2-Results、-Result注解"><a href="#3-2-Results、-Result注解" class="headerlink" title="3.2 @Results、@Result注解"></a>3.2 @Results、@Result注解</h4><p>如果实体字段的名称与数据库表字段名称不一致时，我们就需要显式的指定映射关系。这是通过@Results、@Result注解来指定的，例如为UserMapper的selectById指定映射关系： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT id,name FROM user where id= #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Results(id = &quot;userMap&quot;, value = &#123; </span></span><br><span class="line"><span class="meta">       @Result(property = &quot;id&quot;, column = &quot;id&quot;, javaType = Integer.class,jdbcType = JdbcType.INTEGER,id = true), </span></span><br><span class="line"><span class="meta">       @Result(property = &quot;name&quot;, column = &quot;name&quot;,javaType = String.class,jdbcType = JdbcType.VARCHAR)&#125;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>; </span><br></pre></td></tr></table></figure><p>其中： </p><p>@Results注解：id属性用于给这个映射关系起一个名字(这里指定的为userMap)，其内部还包含了一个@Result[]来表示实体属性和数据库表字段的映射关系 </p><p>@Result注解：property属性是java实体属性的名称，column表示对应的数据库字段的名称。javaType和JdbcType属性可以不指定。 </p><h4 id="3-3-ResultMap注解"><a href="#3-3-ResultMap注解" class="headerlink" title="3.3 @ResultMap注解"></a>3.3 @ResultMap注解</h4><p>   上述selectById方法已经通过@Results注解指定了结果映射关系，通过@ConstructorArgs指定了构造方法(必要的情况下才使用)，那么在其他的查询方法中，我们不需要重复定义，可以通过@ResultMap来引用@Results的id属性值进行复用。如我们在UserMapper的selectAll方法进行复用： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT id,name FROM user&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>; </span><br></pre></td></tr></table></figure><h4 id="3-4-TypeDiscriminator、-Case注解"><a href="#3-4-TypeDiscriminator、-Case注解" class="headerlink" title="3.4 @TypeDiscriminator、@Case注解"></a>3.4 @TypeDiscriminator、@Case注解</h4><p>鉴别器注解基本没用，有空的时候再补充</p><h4 id="3-5-Many、-One注解"><a href="#3-5-Many、-One注解" class="headerlink" title="3.5 @Many、@One注解"></a>3.5 @Many、@One注解</h4><p><strong>主要用于关联关系映射</strong></p><p>假设有作者(author)和文章(article)两张数据库表，一个author可以有多个article，一个article只能属于一个author。相关表结构以及初始数据如下所示： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--author表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`author`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`author`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>) </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;tianshouzhi&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--article表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`article`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`author_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> (<span class="string">`id`</span>, <span class="string">`title`</span>, <span class="string">`content`</span>, <span class="string">`author_id`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;title1&#x27;</span>, <span class="string">&#x27;content1&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;title2&#x27;</span>, <span class="string">&#x27;content2&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>相应的Java实体类如下所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Author author;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//...setters getters and toString...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> List&lt;Article&gt; articles;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//...setters getters and toString...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射器接口定义分别如下： </p><p>ArticleMapper </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、根据文章id查询文章Article对象，同时通过One注解关联查询出作者Author信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT id,title,content,author_id FROM article where id= #&#123;articleId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;articleWithAuthor&quot;, value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;id&quot;, column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;title&quot;, column = &quot;title&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;content&quot;, column = &quot;content&quot;),</span></span><br><span class="line"><span class="meta">            //property属性：指定将关联查询的结果封装到Article对象的author属性上</span></span><br><span class="line"><span class="meta">            //column属性指定：指定在执行@One注解中定义的select语句时，把article表的author_id字段当做参数传入</span></span><br><span class="line"><span class="meta">            //one属性：通过@One注解定义关联查询的语句是AuthorMapper中的findAuthorByAuthorId方法</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;author&quot;,column = &quot;author_id”,</span></span><br><span class="line"><span class="meta">                    one = @One(select = &quot;com.tianshouzhi.mapper.AuthorMapper.findAuthorByAuthorId&quot;))&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">findArticleWithAuthorByArticleId</span><span class="params">(<span class="meta">@Param(&quot;articleId&quot;)</span> <span class="keyword">int</span> articleId)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、根据作者(Author)的id查询其所有的文章(Article)</span></span><br><span class="line">   <span class="meta">@Select(&quot;SELECT id,title,content,author_id FROM article WHERE author_id=#&#123;authorId&#125;&quot;)</span></span><br><span class="line">   <span class="meta">@Results(id = &quot;articlesWithoutAuthor&quot;, value = &#123;</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;id&quot;, column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;title&quot;, column = &quot;title&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;content&quot;, column = &quot;content&quot;)&#125;)</span></span><br><span class="line">   <span class="function">List&lt;Article&gt; <span class="title">findArticlesByAuthorId</span><span class="params">(<span class="meta">@Param(&quot;authorId&quot;)</span> <span class="keyword">int</span> authorId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AuthorMapper </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthorMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据作者id查询Author信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT id,name FROM author WHERE id=#&#123;authorId&#125;&quot;)</span></span><br><span class="line">    <span class="function">Author <span class="title">findAuthorByAuthorId</span><span class="params">(<span class="keyword">int</span> authorId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据作者id查询Author信息，通过@Many注解关联查询出所有的文章信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT id,name FROM author WHERE id=#&#123;authorId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;authorWithArticles&quot;, value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;id&quot;, column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;name&quot;, column = &quot;name”),</span></span><br><span class="line"><span class="meta">           //property属性：指定将关联查询的结果封装到Author对象的articles属性上</span></span><br><span class="line"><span class="meta">            //column属性指定：指定在执行@Many注解中定义的select语句时，把author表的id字段当做参数传入</span></span><br><span class="line"><span class="meta">            //many属性：指定通过@Many注解定义关联查询的语句是ArticleMapper中的findArticlesByAuthorId方法</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;articles&quot;,column = &quot;id”,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.tianshouzhi.mapper.ArticleMapper.findArticlesByAuthorId&quot;))&#125;)</span></span><br><span class="line">    <span class="function">Author <span class="title">findAuthorWithArticlesByAuthorId</span><span class="params">(<span class="keyword">int</span> authorId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneAndMany</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;===========通过@One注解查询出Article关联的Auhtor===========&quot;</span>);</span><br><span class="line">       Article article = articleMapper.findArticleWithAuthorByArticleId(<span class="number">1</span>);</span><br><span class="line">       System.out.println(article);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;===========通过@Many注解查询出Auhtor关联的Article==========&quot;</span>);</span><br><span class="line">       Author author = authorMapper.findAuthorWithArticlesByAuthorId(<span class="number">1</span>);</span><br><span class="line">       System.out.println(author);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果为： </p><p>===========通过@One注解查询出Article关联的Auhtor===========</p><p>Article{id=1, title=’title1’, content=’content1’, author=Author{id=1, name=’tianshouzhi’, articles=null}}</p><p>===========通过@Many注解查询出Auhtor关联的Article==========</p><p>Author{id=1, name=’tianshouzhi’, articles=[Article{id=1, title=’title1’, content=’content1’, author=null}, Article{id=2, title=’title2’, content=’content2’, author=null}]}</p><h3 id="4-缓存相关注解"><a href="#4-缓存相关注解" class="headerlink" title="4 缓存相关注解"></a>4 缓存相关注解</h3><table><thead><tr><th><strong>注解</strong></th><th><strong>使用对象</strong></th><th><strong>相对应的 XML</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>@CacheNamespace</td><td>类</td><td><cache></cache></td><td>为给定的命名空间（比如类）配置缓存。属性有：implemetation, eviction, flushInterval, size, readWrite, blocking 和properties。</td></tr><tr><td>@Property</td><td>N/A</td><td><property></property></td><td>指定参数值或占位值（placeholder）（能被 mybatis-config.xml内的配置属性覆盖）。属性有：name, value。（仅在MyBatis 3.4.2以上版本生效）</td></tr><tr><td>@CacheNamespaceRef</td><td>类</td><td><cacheRef></cacheRef></td><td>参照另外一个命名空间的缓存来使用。属性有：value, name。如果你使用了这个注解，你应设置 value 或者 name 属性的其中一个。value 属性用于指定 Java 类型而指定命名空间（命名空间名就是指定的 Java 类型的全限定名），name 属性（这个属性仅在MyBatis 3.4.2以上版本生效）直接指定了命名空间的名字。</td></tr><tr><td>@Flush</td><td>方法</td><td>N/A</td><td>如果使用了这个注解，定义在 Mapper 接口中的方法能够调用 SqlSession#flushStatements() 方法。（Mybatis 3.3及以上）</td></tr></tbody></table></foreach></h4>]]></content>
      
      
      <categories>
          
          <category> java-mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>官方文档目录摘要</title>
      <link href="2021/01/05/doris/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%9B%AE%E5%BD%95/"/>
      <url>2021/01/05/doris/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><a href="https://github.com/apache/incubator-doris/wiki">git wiki地址</a></p><h1 id="编译与部署"><a href="#编译与部署" class="headerlink" title="编译与部署"></a>编译与部署</h1><h2 id="安装与部署"><a href="#安装与部署" class="headerlink" title="安装与部署"></a><a href="http://doris.apache.org/master/zh-CN/installing/install-deploy.html">安装与部署</a></h2><h3 id="软硬件需求"><a href="#软硬件需求" class="headerlink" title="软硬件需求"></a>软硬件需求</h3><ul><li>FE（前端）和BE（后端）存储数据的区别，以及所需机器配置</li><li>FE与BE端口、网络需求</li><li>ip绑定</li></ul><h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><ul><li><p>手动部署</p></li><li><ul><li>FE部署</li><li>BE部署</li><li>FS_Broker部署</li></ul></li></ul><h3 id="扩容缩容"><a href="#扩容缩容" class="headerlink" title="扩容缩容"></a>扩容缩容</h3><ul><li><p>FE扩容和缩容</p></li><li><ul><li>增加FE节点</li><li>删除FE节点</li></ul></li><li><p>BE扩容和缩容</p></li><li><ul><li>增加BE节点</li><li>删除BE节点</li></ul></li><li><p>Broker扩容缩容</p></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="基础使用指南"><a href="#基础使用指南" class="headerlink" title="基础使用指南"></a><a href="http://doris.apache.org/master/zh-CN/getting-started/basic-usage.html">基础使用指南</a></h2><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h3><ul><li>Root用户登陆与密码修改</li><li>创建新用户</li></ul><h3 id="2-数据表的创建与数据导入"><a href="#2-数据表的创建与数据导入" class="headerlink" title="2.数据表的创建与数据导入"></a>2.数据表的创建与数据导入</h3><ul><li><p>创建数据库</p></li><li><p>账户授权</p></li><li><p>建表</p></li><li><ul><li>单分区</li><li>复合分区</li></ul></li><li><p>导入数据</p></li><li><ul><li>流式导入</li><li>Broker导入</li></ul></li></ul><h3 id="3-数据的查询"><a href="#3-数据的查询" class="headerlink" title="3.数据的查询"></a>3.数据的查询</h3><ul><li>简单查询</li><li>Join查询</li><li>子查询</li></ul><h2 id="高级使用指南"><a href="#高级使用指南" class="headerlink" title="高级使用指南"></a><a href="http://doris.apache.org/master/zh-CN/getting-started/advance-usage.html">高级使用指南</a></h2><h3 id="1-表结构变更"><a href="#1-表结构变更" class="headerlink" title="1. 表结构变更"></a>1. 表结构变更</h3><h3 id="2-Rollup"><a href="#2-Rollup" class="headerlink" title="2. Rollup"></a>2. Rollup</h3><h3 id="3-数据表的查询"><a href="#3-数据表的查询" class="headerlink" title="3. 数据表的查询"></a>3. 数据表的查询</h3><ul><li>内存限制</li><li>查询超时</li><li>Broadcast/Shuffle Join</li><li>查询重试和高可用</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a><a href="http://doris.apache.org/master/zh-CN/getting-started/best-practice.html">最佳实践</a></h2><h3 id="1-建表"><a href="#1-建表" class="headerlink" title="1. 建表"></a>1. 建表</h3><ul><li><p>数据模型选择</p></li><li><ul><li>AGGREGATE KEY</li><li>UNIQUE KEY</li><li>DUPLICATE KEY</li></ul></li><li><p>大宽表与Star Schema</p></li><li><p>分区和分桶</p></li><li><ul><li>Range分区(partition)</li><li>HASH分桶(bucket)</li></ul></li><li><p>稀疏索引和Bloom Filter</p></li><li><p>物化视图(rollup)</p></li><li><ul><li>Base Table中数据聚合度不高</li><li>Base Table中的前缀索引无法命中</li></ul></li></ul><h3 id="2-Schema-Change"><a href="#2-Schema-Change" class="headerlink" title="2. Schema Change"></a>2. Schema Change</h3><ul><li>Sorted Schema Change</li><li>Direct Schema Change: 无需重新排序，但需要对数据做一次转换。例如修改列的类型，在稀疏索引中加一列等</li><li>Linked Schema Change: 无需转换数据，直接完成。例如加列操作</li></ul><h2 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a><a href="http://doris.apache.org/master/zh-CN/getting-started/data-partition.html">数据划分</a></h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li>Row &amp; Column</li><li>Tablet &amp; Partition</li></ul><h3 id="2-数据划分"><a href="#2-数据划分" class="headerlink" title="2. 数据划分"></a>2. 数据划分</h3><ul><li><p>列定义</p></li><li><ul><li>列定义建议</li></ul></li><li><p>分区与分桶</p></li></ul><p>Doris支持两层的数据划分。第一层是Partition，仅支持Range的划分方式。第二层是Bucket（Tablet），仅支持Hash的划分方式。也可以仅使用一层分区</p><ul><li><ul><li>Partition</li><li>Bucket</li><li>关于Partition和Bucket的数量和数据量的建议</li><li>多列分区</li></ul></li><li><p>PROPERTIES</p></li><li><ul><li>replication_num</li><li>storage_medium &amp; storage_cooldown_time</li></ul></li><li><p>ENGINE</p></li></ul><h3 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3. 常见问题"></a>3. 常见问题</h3><ul><li><p>建表操作常见问题</p></li><li><ul><li>如果在较长的建表语句中出现语法错误，可能会出现语法错误提示不全的现象。这里罗列可能的语法错误供手动纠错：</li><li>Failed to create partition [xxx] . Timeout</li><li>建表命令长时间不返回结果。</li></ul></li></ul><h2 id="数据模型、ROLLUP及前缀索引"><a href="#数据模型、ROLLUP及前缀索引" class="headerlink" title="数据模型、ROLLUP及前缀索引"></a><a href="http://doris.apache.org/master/zh-CN/getting-started/data-model-rollup.html">数据模型、ROLLUP及前缀索引</a></h2><p><a href="https://github.com/apache/incubator-doris/wiki/Data-Model%2C-Rollup-%26-Prefix-Index">github wiki</a></p><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li><p>Row</p></li><li><p>Column</p></li><li><ul><li>Key</li><li>Value</li></ul></li></ul><h3 id="2-Aggregate模型"><a href="#2-Aggregate模型" class="headerlink" title="2. Aggregate模型"></a>2. Aggregate模型</h3><ul><li>示例1: 导入数据聚合</li><li>示例2: 保留明细数据</li><li>示例3: 导入数据与已有数据聚合</li></ul><h3 id="3-Uniq模型"><a href="#3-Uniq模型" class="headerlink" title="3. Uniq模型"></a>3. Uniq模型</h3><h3 id="4-Duplicate模型-冗余模型"><a href="#4-Duplicate模型-冗余模型" class="headerlink" title="4. Duplicate模型(冗余模型)"></a>4. Duplicate模型(冗余模型)</h3><h3 id="5-ROLLUP"><a href="#5-ROLLUP" class="headerlink" title="5. ROLLUP"></a>5. ROLLUP</h3><ul><li><p>基本概念</p></li><li><ul><li><p>Aggregate和Uniq模型中的ROLLUP</p></li><li><ul><li>示例1: 获得每个用户的总消费</li><li>示例2: 获得不同城市，不同年龄段用户的总消费、最长和最短页面驻留时间</li></ul></li><li><p>Duplicate模型中的ROLLUP</p></li></ul></li><li><p>前缀索引与ROLLUP</p></li><li><ul><li>前缀索引</li></ul></li></ul><p>我们将一行数据的前 36 个字节 作为这行数据的前缀索引。当遇到 VARCHAR 类型时，前缀索引会直接截断。</p><ul><li><ul><li>ROLLUP调整前缀索引</li></ul></li><li><p><a href="http://doris.apache.org/master/zh-CN/getting-started/data-model-rollup.html#rollup-%E7%9A%84%E5%87%A0%E7%82%B9%E8%AF%B4%E6%98%8E">ROLLUP的几点说明</a></p></li><li><ul><li>根本作用是提高某些查询的查询效率（无论是通过聚合来减少数据量，还是修改列顺序以匹配前缀索引）。因此 ROLLUP 的含义已经超出了 “上卷” 的范围。这也是为什么我们在源代码中，将其命名为 Materized Index（物化索引）的原因。</li><li>ROLLUP是附属于Base表的，可以看作是Base表的一种辅助数据结构。用户可以在 Base 表的基础上，创建或删除 ROLLUP，但是不能在查询中显式的指定查询某 ROLLUP。是否命中 ROLLUP 完全由 Doris 系统自动决定。</li><li>ROLLUP 的数据是独立物理存储的。因此，创建的 ROLLUP 越多，占用的磁盘空间也就越大。同时对导入速度也会有影响（导入的ETL阶段会自动产生所有 ROLLUP 的数据），但是不会降低查询效率（只会更好）。</li></ul></li><li><ul><li>ROLLUP 的数据更新与 Base 表示完全同步的。用户无需关心这个问题。</li><li>ROLLUP 中列的聚合方式，与 Base 表完全相同。在创建 ROLLUP 无需指定，也不能修改。</li><li>查询能否命中 ROLLUP 的一个必要条件（非充分条件）是，查询所涉及的所有列（包括 select list 和 where 中的查询条件列等）都存在于该 ROLLUP 的列中。否则，查询只能命中 Base 表。</li><li>某些类型的查询（如 count(*)）在任何条件下，都无法命中 ROLLUP。具体参见接下来的 聚合模型的局限性 一节。</li><li>可以通过 EXPLAIN your_sql; 命令获得查询执行计划，在执行计划中，查看是否命中 ROLLUP。</li><li>可以通过 DESC tbl_name ALL; 语句显示 Base 表和所有已创建完成的 ROLLUP。</li><li><a href="http://doris.apache.org/master/zh-CN/getting-started/hit-the-rollup">查询如何命中ROLLUP</a></li></ul></li></ul><h3 id="6-聚合模型的局限性"><a href="#6-聚合模型的局限性" class="headerlink" title="6. 聚合模型的局限性"></a>6. 聚合模型的局限性</h3><ul><li>Aggregate 模型（包括 Uniq 模型）</li></ul><p>在聚合模型中，模型对外展现的，是最终聚合后的数据。也就是说，任何还未聚合的数据（比如说两个不同导入批次的数据），必须通过某种方式，以保证对外展示的一致性。</p><ul><li>Duplicate 模型</li></ul><p>Duplicate 模型没有聚合模型的这个局限性。因为该模型不涉及聚合语意，在做 count(*) 查询时，任意选择一列查询，即可得到语意正确的结果。</p><h3 id="7-数据模型的选择建议"><a href="#7-数据模型的选择建议" class="headerlink" title="7. 数据模型的选择建议"></a>7. 数据模型的选择建议</h3><p>因为数据模型在建表时就已经确定，且无法修改。所以，选择一个合适的数据模型非常重要。</p><ol><li>Aggregate 模型可以通过预聚合，极大地降低聚合查询时所需扫描的数据量和查询的计算量，非常适合有固定模式的报表类查询场景。但是该模型对 count(*) 查询很不友好。同时因为固定了 Value 列上的聚合方式，在进行其他类型的聚合查询时，需要考虑语意正确性。</li><li>Uniq 模型针对需要唯一主键约束的场景，可以保证主键唯一性约束。但是无法利用 ROLLUP 等预聚合带来的查询优势（因为本质是 REPLACE，没有 SUM 这种聚合方式）。</li><li>Duplicate 适合任意维度的 Ad-hoc 查询。虽然同样无法利用预聚合的特性，但是不受聚合模型的约束，可以发挥列存模型的优势（只读取相关列，而不需要读取所有 Key 列）。</li></ol><h2 id="Rollup与查询"><a href="#Rollup与查询" class="headerlink" title="Rollup与查询"></a><a href="http://doris.apache.org/master/zh-CN/getting-started/hit-the-rollup.html">Rollup与查询</a></h2><p>在 Doris 里 Rollup 作为一份聚合物化视图，其在查询中可以起到两个作用：</p><ul><li>索引</li><li>聚合数据（仅用于聚合模型，即aggregate key）</li></ul><p>但是为了命中 Rollup 需要满足一定的条件，并且可以通过执行计划中 ScanNdoe 节点的 PreAggregation 的值来判断是否可以命中 Rollup，以及 Rollup 字段来判断命中的是哪一张 Rollup 表。</p><h3 id="1-名词解释"><a href="#1-名词解释" class="headerlink" title="1. 名词解释"></a>1. 名词解释</h3><ul><li>Base： 基表</li><li>Rollup： 一般指基于 Base 表创建的 Rollup 表，但在一些场景包括 Base 以及 Rollup 表。</li></ul><h3 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h3><h3 id="3-聚合数据"><a href="#3-聚合数据" class="headerlink" title="3. 聚合数据"></a>3. 聚合数据</h3><h1 id="操作手册"><a href="#操作手册" class="headerlink" title="操作手册"></a>操作手册</h1><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="1-导入总览"><a href="#1-导入总览" class="headerlink" title="1. 导入总览"></a>1. <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html">导入总览</a></h3><h4 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a></h4><ol><li>Frontend（FE）：Doris 系统的元数据和调度节点。在导入流程中主要负责导入规划生成和导入任务的调度工作。</li><li>Backend（BE）：Doris 系统的计算和存储节点。在导入流程中主要负责数据的 ETL 和存储。</li><li>Broker：Broker 为一个独立的无状态进程。封装了文件系统接口，提供 Doris 读取远端存储系统中文件的能力。</li><li>导入作业（Load job）：导入作业读取用户提交的源数据，转换或清洗后，将数据导入到 Doris 系统中。导入完成后，数据即可被用户查询到。</li><li>Label：所有导入作业都有一个 Label。Label 在一个数据库内唯一，可由用户指定或系统自动生成，用于标识一个导入作业。相同的 Label 仅可用于一个成功的导入作业。</li><li>MySQL 协议/HTTP 协议：Doris 提供两种访问协议接口。 MySQL 协议和 HTTP 协议。部分导入方式使用 MySQL 协议接口提交作业，部分导入方式使用 HTTP 协议接口提交作业。</li></ol><h4 id="1-2-导入方式"><a href="#1-2-导入方式" class="headerlink" title="1.2 导入方式"></a>1.2 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%AF%BC%E5%85%A5%E6%96%B9%E5%BC%8F">导入方式</a></h4><ol><li>Broker load</li><li>Stream load</li><li>Insert</li><li>Multi load</li><li>Routine load</li></ol><h4 id="1-3-基本原理"><a href="#1-3-基本原理" class="headerlink" title="1.3 基本原理"></a>1.3 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">基本原理</a></h4><h5 id="1-3-1-导入执行流程"><a href="#1-3-1-导入执行流程" class="headerlink" title="1.3.1 导入执行流程"></a>1.3.1 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%AF%BC%E5%85%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B">导入执行流程</a></h5><ol><li>PENDING（非必须）</li><li>ETL（非必须）</li><li>LOADING</li><li>FINISHED</li><li>CANCELLED</li></ol><h5 id="1-3-2-Label和原子性"><a href="#1-3-2-Label和原子性" class="headerlink" title="1.3.2 Label和原子性"></a>1.3.2 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#label-%E5%92%8C-%E5%8E%9F%E5%AD%90%E6%80%A7">Label和原子性</a></h5><h4 id="1-4-同步和异步"><a href="#1-4-同步和异步" class="headerlink" title="1.4 同步和异步"></a>1.4 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5">同步和异步</a></h4><h5 id="1-4-1-同步"><a href="#1-4-1-同步" class="headerlink" title="1.4.1 同步"></a>1.4.1 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%90%8C%E6%AD%A5">同步</a></h5><h5 id="1-4-2-异步"><a href="#1-4-2-异步" class="headerlink" title="1.4.2 异步"></a>1.4.2 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%BC%82%E6%AD%A5">异步</a></h5><h5 id="1-4-3-注意事项"><a href="#1-4-3-注意事项" class="headerlink" title="1.4.3 注意事项"></a>1.4.3 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></h5><h4 id="1-5-内存限制"><a href="#1-5-内存限制" class="headerlink" title="1.5 内存限制"></a>1.5 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6">内存限制</a></h4><h4 id="1-6-最佳实践"><a href="#1-6-最佳实践" class="headerlink" title="1.6 最佳实践"></a>1.6 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></h4><h4 id="1-7-通用系统配置"><a href="#1-7-通用系统配置" class="headerlink" title="1.7 通用系统配置"></a>1.7 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E9%80%9A%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE">通用系统配置</a></h4><h5 id="1-7-1-FE配置"><a href="#1-7-1-FE配置" class="headerlink" title="1.7.1 FE配置"></a>1.7.1 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#fe-%E9%85%8D%E7%BD%AE">FE配置</a></h5><h5 id="1-7-2-BE配置"><a href="#1-7-2-BE配置" class="headerlink" title="1.7.2 BE配置"></a>1.7.2 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#be-%E9%85%8D%E7%BD%AE">BE配置</a></h5><h5 id="1-7-3-列映射"><a href="#1-7-3-列映射" class="headerlink" title="1.7.3 列映射"></a>1.7.3 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/load-manual.html#%E5%88%97%E6%98%A0%E5%B0%84">列映射</a></h5><h3 id="2-Broker-Load"><a href="#2-Broker-Load" class="headerlink" title="2.Broker Load"></a>2.<a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html">Broker Load</a></h3><p>一种异步导入方式</p><h4 id="2-1-适用场景"><a href="#2-1-适用场景" class="headerlink" title="2.1 适用场景"></a>2.1 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">适用场景</a></h4><h4 id="2-2-名词解释"><a href="#2-2-名词解释" class="headerlink" title="2.2 名词解释"></a>2.2 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A">名词解释</a></h4><h4 id="2-3-基本原理"><a href="#2-3-基本原理" class="headerlink" title="2.3 基本原理"></a>2.3 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">基本原理</a></h4><h4 id="2-4-基本操作"><a href="#2-4-基本操作" class="headerlink" title="2.4 基本操作"></a>2.4 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">基本操作</a></h4><h5 id="2-4-1-创建导入"><a href="#2-4-1-创建导入" class="headerlink" title="2.4.1 创建导入"></a>2.4.1 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E5%88%9B%E5%BB%BA%E5%AF%BC%E5%85%A5">创建导入</a></h5><h5 id="2-4-2-查看导入"><a href="#2-4-2-查看导入" class="headerlink" title="2.4.2 查看导入"></a>2.4.2 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E6%9F%A5%E7%9C%8B%E5%AF%BC%E5%85%A5">查看导入</a></h5><h5 id="2-4-3-取消导入"><a href="#2-4-3-取消导入" class="headerlink" title="2.4.3 取消导入"></a>2.4.3 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E5%8F%96%E6%B6%88%E5%AF%BC%E5%85%A5">取消导入</a></h5><h4 id="2-5-相关系统配置"><a href="#2-5-相关系统配置" class="headerlink" title="2.5 相关系统配置"></a>2.5 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E7%9B%B8%E5%85%B3%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE">相关系统配置</a></h4><h5 id="2-5-1-FE-配置"><a href="#2-5-1-FE-配置" class="headerlink" title="2.5.1 FE 配置"></a>2.5.1 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#fe-%E9%85%8D%E7%BD%AE">FE 配置</a></h5><h4 id="2-6-最佳实践"><a href="#2-6-最佳实践" class="headerlink" title="2.6 最佳实践"></a>2.6 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></h4><h5 id="2-6-1-应用场景"><a href="#2-6-1-应用场景" class="headerlink" title="2.6.1 应用场景"></a>2.6.1 应用场景</h5><p>使用 Broker load 最适合的场景就是原始数据在文件系统（HDFS，BOS，AFS）中的场景。其次，由于 Broker load 是单次导入中唯一的一种异步导入的方式，所以如果用户在导入大文件中，需要使用异步接入，也可以考虑使用 Broker load。</p><h5 id="2-6-2-数据量"><a href="#2-6-2-数据量" class="headerlink" title="2.6.2 数据量"></a>2.6.2 数据量</h5><p>这里仅讨论单个 BE 的情况，如果用户集群有多个 BE 则下面标题中的数据量应该乘以 BE 个数来计算。比如：如果用户有3个 BE，则 3G 以下（包含）则应该乘以 3，也就是 9G 以下（包含）。</p><h5 id="2-6-3-性能分析"><a href="#2-6-3-性能分析" class="headerlink" title="2.6.3 性能分析"></a>2.6.3 性能分析</h5><h5 id="2-6-4-完整例子"><a href="#2-6-4-完整例子" class="headerlink" title="2.6.4 完整例子"></a>2.6.4 完整例子</h5><h4 id="2-7-常见问题"><a href="#2-7-常见问题" class="headerlink" title="2.7 常见问题"></a>2.7 <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/broker-load-manual.html#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a></h4><h3 id="3-Stream-load"><a href="#3-Stream-load" class="headerlink" title="3. Stream load"></a>3. <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/stream-load-manual.html#stream-load">Stream load</a></h3><p>Stream load 是一个同步的导入方式，用户通过发送 HTTP 协议发送请求将本地文件或数据流导入到 Doris 中。Stream load 同步执行导入并返回导入结果。用户可直接通过请求的返回体判断本次导入是否成功。</p><p>Stream load 主要适用于导入本地文件，或通过程序导入数据流中的数据。</p><h4 id="3-1-基本原理"><a href="#3-1-基本原理" class="headerlink" title="3.1 基本原理"></a>3.1 基本原理</h4><h4 id="3-2-基本操作"><a href="#3-2-基本操作" class="headerlink" title="3.2 基本操作"></a>3.2 基本操作</h4><h4 id="3-3-相关系统配置"><a href="#3-3-相关系统配置" class="headerlink" title="3.3 相关系统配置"></a>3.3 相关系统配置</h4><h4 id="3-4-最佳实践"><a href="#3-4-最佳实践" class="headerlink" title="3.4 最佳实践"></a>3.4 最佳实践</h4><h5 id="3-4-1-应用场景"><a href="#3-4-1-应用场景" class="headerlink" title="3.4.1 应用场景"></a>3.4.1 应用场景</h5><p>使用 Stream load 的最合适场景就是原始文件在内存中，或者在磁盘中。其次，由于 Stream load 是一种同步的导入方式，所以用户如果希望用同步方式获取导入结果，也可以使用这种导入。</p><h5 id="3-4-2-数据量"><a href="#3-4-2-数据量" class="headerlink" title="3.4.2 数据量"></a>3.4.2 数据量</h5><h5 id="3-4-3-完整例子"><a href="#3-4-3-完整例子" class="headerlink" title="3.4.3 完整例子"></a>3.4.3 完整例子</h5><h4 id="3-5-常见问题"><a href="#3-5-常见问题" class="headerlink" title="3.5 常见问题"></a>3.5 常见问题</h4><h3 id="4-Routine-Load"><a href="#4-Routine-Load" class="headerlink" title="4. Routine Load"></a>4. <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/routine-load-manual.html">Routine Load</a></h3><p>例行导入（Routine Load）功能为用户提供了一种自动从指定数据源进行数据导入的功能。</p><p>本文档主要介绍该功能的实现原理、使用方式以及最佳实践。</p><h3 id="5-insert-into"><a href="#5-insert-into" class="headerlink" title="5. insert into"></a>5. <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/insert-into-manual.html"><u>insert into</u></a></h3><p>Insert Into 语句的使用方式和 MySQL 等数据库中 Insert Into 语句的使用方式类似。但在 Doris 中，所有的数据写入都是一个独立的导入作业。所以这里将 Insert Into 也作为一种导入方式介绍。</p><p>主要的 Insert Into 命令包含以下两种；</p><ul><li>INSERT INTO tbl SELECT …</li><li>INSERT INTO tbl (col1, col2, …) VALUES (1, 2, …), (1,3, …);</li></ul><p>其中第二种命令仅用于 Demo，不要使用在测试或生产环境中。</p><h3 id="6-spark-Load"><a href="#6-spark-Load" class="headerlink" title="6. spark Load"></a>6. <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/spark-load-manual.html"><u>spark Load</u></a></h3><p>Spark load 通过外部的 Spark 资源实现对导入数据的预处理，提高 Doris 大数据量的导入性能并且节省 Doris 集群的计算资源。主要用于初次迁移，大数据量导入 Doris 的场景。</p><p>Spark load 是一种异步导入方式，用户需要通过 MySQL 协议创建 Spark 类型导入任务，并通过 <code>SHOW LOAD</code> 查看导入结果。</p><h4 id="6-1-适用场景"><a href="#6-1-适用场景" class="headerlink" title="6.1 适用场景"></a>6.1 适用场景</h4><ul><li>源数据在 Spark 可以访问的存储系统中，如 HDFS。</li><li>数据量在 几十 GB 到 TB 级别。</li></ul><h3 id="7-delete"><a href="#7-delete" class="headerlink" title="7. delete"></a>7. <a href="http://doris.apache.org/master/zh-CN/administrator-guide/load-data/delete-manual.html">delete</a></h3><p>Delete不同于其他导入方式，它是一个同步过程。和Insert into相似，所有的Delete操作在Doris中是一个独立的导入作业，一般Delete语句需要指定表和分区以及删除的条件来筛选要删除的数据，并将会同时删除base表和rollup表的数据。</p><h2 id="表结构变更"><a href="#表结构变更" class="headerlink" title="表结构变更"></a>表结构变更</h2><h2 id="常用参考"><a href="#常用参考" class="headerlink" title="常用参考"></a>常用参考</h2><p><a href="http://doris.apache.org/master/zh-CN/getting-started/data-model-rollup.html#%E8%81%9A%E5%90%88%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7">数据模型、ROLLUP 及前缀索引</a></p><p><a href="http://doris.apache.org/master/zh-CN/sql-reference/sql-statements/Data%20Definition/ALTER%20TABLE.html#example">ALTER TABLE</a></p>]]></content>
      
      
      <categories>
          
          <category> doris </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参考资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类用法</title>
      <link href="2021/01/05/java/web/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>2021/01/05/java/web/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="Connection-reset原因分析和解决方案"><a href="#Connection-reset原因分析和解决方案" class="headerlink" title="Connection reset原因分析和解决方案"></a>Connection reset原因分析和解决方案</h4><p>一般引起这个问题的原因是服务器服务关闭。</p><p>我遇到过一次问题是因为http端口填写错误。</p><p><a href="https://blog.csdn.net/liyantianmin/article/details/82505734">Connection reset原因分析和解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/12/30/template/"/>
      <url>2020/12/30/template/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对象使用规范(一)</title>
      <link href="2020/12/30/java/rule/%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83(%E4%B8%80)/"/>
      <url>2020/12/30/java/rule/%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h3 id="Po、Vo、Bo、Dto、、"><a href="#Po、Vo、Bo、Dto、、" class="headerlink" title="Po、Vo、Bo、Dto、、"></a>Po、Vo、Bo、Dto、、</h3><p><a href="https://blog.csdn.net/uestcyms/article/details/80244407">Java中常见的对象类型简述(DO、BO、DTO、VO、AO、PO)</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插件</title>
      <link href="2020/12/23/tools/hexo/hexo%E6%8F%92%E4%BB%B6&amp;%E4%B8%BB%E9%A2%98/"/>
      <url>2020/12/23/tools/hexo/hexo%E6%8F%92%E4%BB%B6&amp;%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><ol><li><a href="https://github.com/hexojs/hexo-math">hexo-math</a> KaTeX语法</li><li><a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a> LaTeX语法</li></ol><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h5 id="1-本地搜索"><a href="#1-本地搜索" class="headerlink" title="1.本地搜索"></a>1.本地搜索</h5><ul><li><p><code>npm install hexo-generator-search</code></p></li><li><p>查找主题配置文件<code>themes/next/_config.yml</code>中的 <code>local_search</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ul><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h3 id="常用插件推荐"><a href="#常用插件推荐" class="headerlink" title="常用插件推荐"></a>常用插件推荐</h3><ol><li><a href>分享几个实用的HEXO博客功能插件</a></li><li><a href="https://plushine.cn/54808.html#%E4%B8%8D%E5%AE%89%E5%85%A8%E6%B3%95">Hexo常用插件</a></li><li><a href="https://www.zdynb.cn/2019/hexo-bi-bei-cha-jian.html">常用插件</a></li><li><a href="https://blog.csdn.net/q2158798/article/details/82354154">hexo博客常用插件及教程</a></li><li><a href="https://www.dazhuanlan.com/2020/03/12/5e69772f9d2c2/">hexo常用插件</a></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/weixin_39345384/article/details/80785373?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="2020/12/23/tools/markdown/"/>
      <url>2020/12/23/tools/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>全部数学符号 <a href="https://katex.org/docs/supported.html">https://katex.org/docs/supported.html</a></p><p><a href="https://www.cnblogs.com/caomingpei/p/9760652.html">https://www.cnblogs.com/caomingpei/p/9760652.html</a></p><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>inline math：<code>$x^&#123;y^z&#125;=(1+e^x)^&#123;-2xy^w&#125;$</code></p><p>block math:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;7x+5&#125;&#123;1+y^2&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><ol><li>上标：n^2^</li><li>下标：n<del>2</del></li></ol><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p><a href="https://blog.csdn.net/super828/article/details/99055541">Markdown文字添加颜色方法总结（珍藏）</a><br><a href="https://blog.csdn.net/liuhw4598/article/details/78279737">MarkDown: 为字体添加颜色</a></p><p>包含rgb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">      &lt;font face&#x3D;&quot;微软雅黑&quot; &gt;微软雅黑字体&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;font face&#x3D;&quot;黑体&quot; &gt;黑体&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;font size&#x3D;3 &gt;3号字&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;font size&#x3D;4 &gt;4号字&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;font color&#x3D;#FF0000 &gt;红色&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;font color&#x3D;#008000 &gt;绿色&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;font color&#x3D;#0000FF &gt;蓝色&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">$\color&#123;#FF3030&#125;&#123;红色文字&#125;$</span><br><span class="line"></span><br><span class="line">rgb：</span><br><span class="line">红：255，0，0 #FF0000</span><br><span class="line">      橙: 255,125,0 #FF7D00</span><br><span class="line">      黄：255，255，0 #FFFF00</span><br><span class="line">      绿：0，255，0 #00FF00</span><br><span class="line">      蓝：0，0，255 #0000FF</span><br><span class="line">      靛: 0,255,255 #00FFFF</span><br><span class="line">      紫: 255,0,255 #FF00FF</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>背景色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor&#x3D;orange&gt; 背景色是 1 orange&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;</span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor&#x3D; BlueViolet &gt; 背景色2 BlueViolet &lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    a--&gt;b</span><br><span class="line">    a--&gt;c</span><br><span class="line">    d--&gt;e</span><br></pre></td></tr></table></figure><div id="flowchart-0" class="flow-chart"></div><h1 id="下面是通过html语法完成的，非markdown自带功能"><a href="#下面是通过html语法完成的，非markdown自带功能" class="headerlink" title="下面是通过html语法完成的，非markdown自带功能"></a>下面是通过html语法完成的，非markdown自带功能</h1><h2 id="改变文字样式"><a href="#改变文字样式" class="headerlink" title="改变文字样式"></a>改变文字样式</h2><p style="text-align:center;color:#1e819e;font-size:1.3em;font-weight:bold;">改变文字的大小、颜色和对齐方式</p><h2 id="自定义表格样式"><a href="#自定义表格样式" class="headerlink" title="自定义表格样式"></a>自定义表格样式</h2><table>    <tr>        <td rowspan="7"> 文件状态：            <br> [√] 草稿            <br> [√] 正在修改            <br> [√] 正式发布 </td>        <td>文件名称：</td>        <td>LSGO股票交易策略分析软件 Use Case Model</td>    </tr>    <tr>        <td>当前版本：</td>        <td>1.0.0</td>    </tr>    <tr>        <td>作 者：</td>        <td>马燕鹏</td>    </tr>    <tr>        <td>创建日期：</td>        <td>2018-07-15</td>    </tr>    <tr>        <td>最后更新：</td>        <td></td>    </tr>    <tr>        <td>密 级：</td>        <td>开源系统</td>    </tr>    <tr>        <td>版权说明：</td>        <td>遵守 GPL V3协议</td>    </tr></table><h2 id="折叠内容"><a href="#折叠内容" class="headerlink" title="折叠内容"></a>折叠内容</h2><details><summary>explode 与 lateral view 对比</summary><pre><code>select user_coupon_id, explode(split('0,1', ',')) as tagfrom mart_waimai.aggr_act_ord_use_coupon_ddwhere dt='20200920'limit 10</code></pre></details><h2 id="支持html标签"><a href="#支持html标签" class="headerlink" title="支持html标签"></a>支持html标签</h2><h1 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h1><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><ol><li><a href="https://blog.csdn.net/witnessai1/article/details/52551362">完整整理版</a></li><li><a href="https://mermaidjs.github.io/">流程图详细教程</a></li><li><a href="http://blog.csdn.net/lk7688535/article/details/52528307">编辑数学公式</a></li><li><a href="https://www.runoob.com/markdown/md-advance.html">Markdown 高级技巧</a></li><li><a href="https://www.appinn.com/markdown/">markdown语法</a></li><li><a href="https://blog.csdn.net/heimu24/article/details/81189700">Markdown进阶（更改字体、颜色、大小，设置文字背景色，调整图片大小设置居中）</a></li><li><a href="https://zhuanlan.zhihu.com/p/93239297">Markdown 技巧：如何改变表格宽度（列宽）？</a></li></ol><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><ol><li><a href="https://www.dazhuanlan.com/2019/10/16/5da6b7885b94f/">Hexo下的Markdown语法</a></li><li><a href="https://www.cnblogs.com/huanhao/p/markdown.html">【hexo博客进阶】1.Markdown语法</a></li><li><a href="https://segmentfault.com/q/1010000009073806?utm_source=sf-similar-question">如何让hexo使用流程图</a></li><li><a href="http://www.zhaojun.im/hexo-flowchart/">Hexo优化 — 利用 Markdown 语法画流程图</a></li></ol><h1 id="markdown工具"><a href="#markdown工具" class="headerlink" title="markdown工具"></a>markdown工具</h1><ol><li><a href="https://www.typora.io/">Typora</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]e=>end: End:>http://www.google.comop1=>operation: My Operation|pastop2=>operation: Stuff|currentsub1=>subroutine: My Subroutine|invalidcond=>condition: Yesor No?|approved:>http://www.google.comc2=>condition: Good idea|rejectedio=>inputoutput: catch something...|requestst->op1(right)->condcond(yes, right)->c2cond(no)->sub1(left)->op1c2(yes)->io->ec2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>参考资料</title>
      <link href="2020/12/23/doris/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>2020/12/23/doris/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol><li><a href="https://www.sohu.com/a/390678890_505779">Apache Doris在美团外卖数仓中的应用实践</a></li><li><a href="https://blog.csdn.net/huzechen/article/details/109376514">Doris在用户画像人群业务的应用</a></li><li></li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h4>]]></content>
      
      
      <categories>
          
          <category> doris </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参考资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/07/hello-world/"/>
      <url>2020/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
